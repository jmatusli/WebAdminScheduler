@using WebAdminScheduler.Models
@model dynamic
@{
ViewData["Title"] = "Edit";
}
<head>
<meta charset="utf-8">
	<link rel="stylesheet" href="~/css/datatables.min.css" />
	<link rel="stylesheet" href="~/lib/Toast/dist/jquery.toast.min.css" />
	<link rel="stylesheet" href="~/lib/bootstrap/3.3.4/css/bootstrap.min.css" /> 
	<link rel="stylesheet" href="~/lib/SweetAlert/dist/sweetalert2.min.css" />
	<link rel="stylesheet" href="~/lib/Vis/dist/vis-network.min.css" rel="stylesheet" type="text/css"/>
	<link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap-multiselect.css" rel="stylesheet" type="text/css"/>
	
	<script src="~/js/jquery-1.11.3.min.js"></script>
	<script src="~/js/pdfmake.min.js"></script>
	<script src="~/js/vfs_fonts.js"></script>
	<script src="~/js/datatables.min.js"></script>
	<script src="~/lib/SweetAlert/dist/sweetalert2.min.js"></script>
	<script src="~/lib/Toast/dist/jquery.toast.min.js"></script>
	<script src="~/lib/Vis/dist/vis.js"></script>
	<script src="~/lib/bootstrap/3.3.4/js/bootstrap.min.js"></script>
	<script src="~/lib/bootstrap/dist/js/bootstrap-multiselect.js"></script>
	
	<style>
		#mynetwork {
		width: 90vw;
		height: 85%;
		border: 1px solid lightgray;
		align:center;
		}
		
		/* CSS3 */
		
		/* The whole thing */
		.custom-menu {
		display: none;
		z-index: 1000;
		position: absolute;
		overflow: hidden;
		border: 1px solid #CCC;
		white-space: nowrap;
		font-family: sans-serif;
		background: #FFF;
		color: #333;
		border-radius: 5px;
		padding: 0;
		}
		
		/* Each of the items in the list */
		.custom-menu li {
		padding: 8px 12px;
		cursor: pointer;
		list-style-type: none;
		transition: all .3s ease;
		user-select: none;
		}
		
		.custom-menu li:hover {
		background-color: #DEF;
		}    
		
		.bd-example-modal-lg.modal.custom-class {
		z-index: 1029
		}
		
		.bd-example-modal-sm.custom-class {
		z-index: 1050
		}
		
			.vis-tooltip{
 padding: 10px; border: 1px solid rgb(77, 77, 77)!important; 
 color: rgb(26, 26, 26); 
 background: #D7DBDD!important; 
 border-radius: 10px!important; box-shadow: #717D7E 5px 5px 10px!important; position: relative;
 } 
 .caret{
display:none!important;
}


.modal-fullscreen {
    width: 95vw !important;
    max-width: none;
    height: 90% !important;
    
}
	</style>
</head>

<h1>Editar Jobs</h1>
<br />
<div class="card">
	<div class="card-header">
		<a id="btnSaveJobs" onclick="GuardarJobs()" class="btn btn-primary">Guardar</a>
	</div>
	<div class="card-body">
	<div class="container">
		<div class="row">
			<div class="col-auto">
				<label for="TittleProc" class="col-form-label">IDPROC</label>
			</div>
			<div class="col-auto">
				<label for="txtIdProc" class="col-form-label">@Model.process.IDPROC</label>
			</div>
			</div>
			</div>
		<br />	
		<div class="container">
		<div class="row">	
			<div class="col-auto">
				<label for="TittleConex" class="col-form-label">CONEXION</label>
			</div>
			<div class="col-auto">
			  <select class="form-control" id="slcUptIdConex">
            <option value="-1">Seleccione Conexion</option>
          </select>
			
			</div>
		</div>
	 </div>
		<br />
		
		<div class="container">
			<div class="row">
				<div class="col-auto">
					<label for="TittleNombre" class="col-form-label">NOMBRE</label>
				</div>
				<div class="col-6">
					<input type="text" min="1" class="form-control" data-placement="right" data-align="top" data-autoclose="true" id="txtUptNombre" name="txtUptNombre">
				</div>
			</div>
		</div>
		<br />
		
		<div class="container">
			<div class="row">
				<div class="col-auto">
					<label for="TittleDescrpcion" class="col-form-label">DESCRIPCIÃ“N</label>
				</div>
				<div class="col-6">
					<input type="text" min="1" class="form-control" data-placement="right" data-align="top" data-autoclose="true" id="txtUptDescripcion" name="txtUptDescripcion">
				</div>
			</div>
		</div>
		<br />
		
		<div class="container">
			<div class="row">
				<div class="col-auto">
					<label for="TittlePath" class="col-form-label">PATH</label>
				</div>
				<div class="col-6">
					<input type="text" min="1" class="form-control" data-placement="right" data-align="top" data-autoclose="true" id="txtUptPath" name="txtUptPath">
				</div>
			</div>
		</div>
		<br />
		
		<div class="container">
			<div class="row">
				<div class="col-auto">
					<label for="TittleParametro1" class="col-form-label">PARAMETRO1</label>
				</div>
				<div class="col-6">
					<input type="text" min="1" class="form-control" data-placement="right" data-align="top" data-autoclose="true" id="txtUptParametro1" name="txtUptParametro1">
				</div>
			</div>
		</div>
		<br />
		
		<div class="container">
			<div class="row">
				<div class="col-auto">
					<label for="TittleParametroDos" class="col-form-label">PARAMETRO2</label>
				</div>
				<div class="col-6">
					<input type="text" min="1" class="form-control" data-placement="right" data-align="top" data-autoclose="true" id="txtUptParametro2" name="txtUptParametro2">
				</div>
			</div>
		</div>
		<br />
		
		<div class="container">
			<div class="row">
				<div class="col-auto">
					<label for="TittleParametroTres" class="col-form-label">PARAMETRO3</label>
				</div>
				<div class="col-6">
					<input type="text" min="1" class="form-control" data-placement="right" data-align="top" data-autoclose="true" id="txtUptParametro3" name="txtParametro3">
				</div>
			</div>
		</div>
		<br />
		
		<div class="container">
			<div class="row">
				<div class="col-auto">
					<label for="TittleParametroCuatro" class="col-form-label">PARAMETRO4</label>
				</div>
				<div class="col-6">
					<input type="text" min="1" class="form-control" data-placement="right" data-align="top" data-autoclose="true" id="txtUptParametro4" name="txtUptParametro4">
				</div>
			</div>
		</div>
		<br />
		
		<div class="row g-4 align-items-center">
			<div class="col-auto">
				<div class="form-check">
					<input class="form-check-input" type="checkbox" value="" id="checkUptDependencia" name="checkUptDependencia">
					<label class="form-check-label" for="IdDependencia">
						DEPENDENCIA
					</label>
				</div>
			</div>
			<div class="col-auto">
				<label class="form-check-label" for="lblIntentos">
					INTENTOS
				</label>
			</div>
			<div class="col-auto">
				<input type="number" min="1" class="form-control" data-placement="right" data-align="top" data-autoclose="true" id="txtUptIntentos" name="txtUptIntentos">
			</div>
			<div class="col-auto">
				<label class="form-check-label" for="lblEsperaIntento">
					ESPERA INTENTO
				</label>
			</div>
			<div class="col-auto">
				<input type="number" min="1" class="form-control" data-placement="right" data-align="top" data-autoclose="true" id="txtUptEsperaIntento" name="txtUptEsperaIntento">
			</div>
			<div class="col-auto">
				<label class="form-check-label" for="lblEstado">
					ESTADO
				</label>
			</div>
			<div class="col-auto">
				<select class="form-select" name="txtUptEstado" id="txtUptEstado">
					<option value="Activo">ACTIVO</option>
					<option value="Inactivo">INACTIVO</option>
					<option value="Internal">INTERNAL</option>
				</select>
			</div>
			<div class="col-auto">
				<div class="form-check">
					<input class="form-check-input" type="checkbox" value="" id="flexUptCheckFtp">
					<label class="form-check-label" for="lblFtp">
						FTP
					</label>
				</div>
			</div>
			<div class="col-auto">
				<label class="form-check-label" for="lblIdHost">
					IDHOST
				</label>
			</div>
			<div class="col-auto">
				<input type="number" min="1" class="form-control" data-placement="right" data-align="top" data-autoclose="true" id="txtUptIdHost" name="txtUptIdHost">
			</div>
			<div class="col-auto">
				<div class="form-check">
					<input class="form-check-input" type="checkbox" value="" id="flexCheckUptCompresion" name="flexCheckUptCompresion">
					<label class="form-check-label" for="lblflexCheckComprension">
						COMPRESION
					</label>
				</div>
			</div>
			<div class="col-auto">
				<label class="form-check-label" for="lblNode">
					NODE
				</label>
			</div>
			<div class="col-auto">
				<input type="text" min="1" class="form-control" data-placement="right" data-align="top" data-autoclose="true" id="txtUptNode" name="txtUptNode">
			</div>
			
			<div class="col-auto">
				<button type="button" class="btn btn-info" id="btnEDependencia" data-target=".bd-example-modal-lg" name="btnEDependencia" disabled>Editar Dependencia</button>
			</div>
			
		</div>
		<br />
		
		<div class="row g-4 align-items-center">
			<div class="col-auto">
				<label class="form-check-label" for="lblNotifications">
					NOTIFICACIONES
				</label>
			</div>
			<div class="col-auto">
				<select class="form-select" name="txtUptNotifications" id="txtUptNotifications">
					<option value="0">0 - Dummy Notification</option>
					<option value="1">1 - Notification Success/Failure to BI members</option>
					<option value="2">2 - Notification Success Only to BI members</option>
					<option value="3">3 - Notification Failure Only to BI members</option>
				</select>
			</div>
		</div>
	</div>
	<div class="card-footer text-muted">
		<h4 style="text-align: center;">Editar crontab asociado</h4>
	</div>
</div>

<div class="container">
	<table id="dt-crontab" class="display nowrap" width="100%">
		<thead>
			<tr>
				<th><input type="checkbox" name="select_all" class="dt-column-title" value="1" id="dt-crontab-select-all-th"></th>
				<th style="font-size:13px;">IDCRONTAB</th>
				<th style="font-size:13px;">HORA INICIO</th>
				<th style="font-size:13px;">HORA FIN</th>
				<th style="font-size:13px;">DAYS</th>
				<th style="font-size:13px;">DAY EXE</th>
				<th style="font-size:13px;">MONTHS</th>
				<th style="font-size:13px;">REPEAT EVERY MINS</th>
				<th style="font-size:13px;">REPEAT AFTER FINISH</th>
			</tr>
		</thead>
		<tbody>
		</tbody>
	</table>
</div>

<div class="modal fade bd-example-modal-lg" id="bd-example-modal-lg" tabindex="-1" role="dialog" aria-labelledby="basicModal">
    <div class="modal-dialog modal-fullscreen">
		<div class="modal-content">
			<div class="modal-header">
				<h4 class="modal-title" id="myModalLabel">Dependencias</h4>
				<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
			</div>
			<div class="modal-body">
				<ul class='custom-menu'>
					<li data-action="first" id="firstli">Agregar Dependencia</li>
					<li data-action="second">Borrar Dependencia</li>
					<li data-action="third">Cancelar</li>
				</ul>
				<div id="mynetwork">
				</div>        	
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
			</div>
		</div>
	</div>
</div>

<div class="modal fade bd-example-modal-sm" id="bd-example-modal-sm" tabindex="-1" role="dialog" aria-labelledby="basicModal">
    <div class="modal-dialog modal-lg">
		<div class="modal-content">
			<div class="modal-header">
				<h4 class="modal-title" id="myModalLabel">Proceso</h4>
				<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
			</div>
			<div class="modal-body">
				<div class="">
					<strong>Seleccionar dependencia:</strong>
					<select id="multiple-checkboxes">
						<option value="0">Seleccione proceso</option>
					</select>
				</div>      	
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-info btnaddDep">Guardar</button>
				<button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
			</div>
		</div>
	</div>
</div>

<script> 
	var params={};
	var table={};
	var idjob="";
	var idproc="@Model.process.IDPROC";
 
	params.idproc=idproc;
	
	var id_conex = "@Model.process.IDCONEX";
	 
	var nombre = "@Model.process.NOMBRE";
	var descripcion = "@Model.process.DESCRIPCION";
	var path = "@Model.process.PATH";
	var param1 = "@Model.process.PARAMETRO1";
	var param2 = "@Model.process.PARAMETRO2";
	var param3 = "@Model.process.PARAMETRO3";
	var param4 = "@Model.process.PARAMETRO4";
	var dependencia = "@Model.process.DEPENDENCIA";
	var intentos = "@Model.process.INTENTOS";
	var espera_intento = "@Model.process.ESPERA_INTENTO";
	var estado = "@Model.process.ESTADO";
	var ftp = "@Model.process.FTP";
	var id_host = "@Model.process.IDHOST";
	var compresion = "@Model.process.COMPRESION";
	var node = "@Model.process.NODE";
	var id_notif = "@Model.process.IDNOTIF";
	var idcrontab = "@Model.process.IDCRONTAB";
	var selectedCrontab = "@Model.process.IDCRONTAB";
	
	/*declaracion variable usadas en nodos */
	let procsDep=[];
	let procsNet=[];
	let edgeNet=[];
	let elementactu=0;
	let levelactu=0;
	let nodestmp=null;
    let edgestmp=null ;	
	let nodesnew=null ;
	let edgesnew=null;
    
	var existeNombre=false;
	
	var nodes = null;
	var edges = null;
	var network = null;

	/*******************************************/
	function cargarDatos() {
jQuery.ajax({
    method: "POST",
    async: true,
    data: {},
    url: "@Url.Action("ListConexions","Jobs")",

    success: function (data) {
      let elementid=0;
      
       $(data.data).each(function(index, element){
          
               $('#slcUptIdConex')
            .append($('<option>')
            .text(element.usuario)
            .attr('value', element.idconex));
          });
          
          $('#slcUptIdConex').multiselect({
            includeSelectAllOption: true,
             enableFiltering: true,
    includeFilterClearBtn: true,
    enableCaseInsensitiveFiltering: true
          });  
		  $("#slcUptIdConex").next().find("input[type='radio'] ").prop("checked", false);
		  $("#slcUptIdConex").multiselect("clearSelection");
		  $("#slcUptIdConex").val(id_conex).multiselect("refresh");
          
	}
     
        });


jQuery.ajax({
    method: "POST",
    async: true,
    data: {id:idproc},
    url: "@Url.Action("ListDependencias","Jobs")",

    success: function (data) {

    
$(data.data).each(function(index, element) {
						 
						procsDep.push({"IDPROC":element.idproc,"IDPROC_DEP":element.idproC_DEP});
					 
						 
					});
console.log("dependencias encontradas para usar en el save no visualizacion ",procsDep)
					 
					
	}});




  }
	
	//funcion para validar existencia del nombre de un proceso.
	function verifyName()
	{
		$.ajax({
			method: "POST",
			async: true,
			
			data:{"nombre":$("#txtUptNombre").val(),"prcid":idproc},
			url: '@Url.Action("VerifyName", "Jobs")' ,
			success: function (response) {
				
				console.log("respuesta ",response);
				if(response.error)
				{
					existeNombre=true;
					Swal.fire (response.msg, 'error')
					
				}
				
			},
			error: function () {
				alert("Error while inserting data");
			}
		});
	}//fin funcion para validar existencia del nombre de un proceso.
	
	
    $("#checkUptDependencia").on("change",function() {
		if($(this).is(":checked")) {
			$("#btnEDependencia").prop( "disabled", false ); //Enable
		}
		else {
			$("#btnEDependencia").prop("disabled", true ); //Disable
		}
	});
	
	String.prototype.decodeHTML = function() {
		return $('<div>').html(this).text();
	};
	
	$(document).ready( function () {
		 $("#txtUptNombre").val(nombre);
		$("#txtUptDescripcion").val(descripcion.decodeHTML());
		$("#txtUptPath").val(path);
		$("#txtUptParametro1").val(param1.decodeHTML());
		$("#txtUptParametro2").val(param2.decodeHTML());
		$("#txtUptParametro3").val(param3.decodeHTML());
		$("#txtUptParametro4").val(param4.decodeHTML());
		
		if(dependencia == 1) {
			$("#checkUptDependencia").prop('checked', true);
			$("#btnEDependencia").prop('disabled', false);
			} else {
			$("#checkUptDependencia").prop('checked', false);
			$("#btnEDependencia").prop('disabled', true);
		}
		
		$("#txtUptIntentos").val(intentos);
		$("#txtUptEsperaIntento").val(espera_intento);
		$("#txtUptEstado").val(estado);
		$("#txtUptNode").val(node);
		$("#txtUptNotifications").val(id_notif);
		
		if(ftp == 1) {
			$("#flexUptCheckFtp").prop('checked', true);
			} else {
			$("#flexUptCheckFtp").prop('checked', false);
		}
		
		$("#txtUptIdHost").val(id_host);
		
		if(compresion == 1) {
			$("#flexCheckUptCompresion").prop('checked', true);
			} else {
			$("#flexCheckUptCompresion").prop('checked', false);
		}
		
		var table = $('#dt-crontab').DataTable( {
			"processing": true,
			"serverSide": true,
			"paging": true,
			"deferLoading": 0, // here
			"scrollX":          true,
			"sScrollX":         "50%",
			"scrollY":            $(document).height() - 300,
			"scrollCollapse":     true,
			"ajax": {
				"url": "@Url.Action("ListarCrontabs","Calendario")",
				"type": "POST",
				"datatype": "json",
				"data": function(d){
					$.extend( d, params);    
				}
			},
			drawCallback: function(settings){ 
				if($(this).find('tbody tr').length <= 1){
					$('.dt-paging-button').hide();
				}
				},rowCallback: function (row, data) {
				if (data.idcrontab == idcrontab) {
					table.row(row).select()
				}  
			},
			"columnDefs": [{
				'targets': 0,
				orderable: false
			} 
			],
			"columns": [
			{
				"render": function (data,row) { return '<input type="radio" name="select_all" class="dt-column-title" value="1" id="dt-crontab-select-item">';   }
			},
			{ "data": "idcrontab", "name": "idcrontab", "autoWidth": true },
			{ "data": "horA_INICIO", "name": "horA_INICIO", "autoWidth": true },
			{ "data": "horA_FIN", "name": "horA_FIN", "autoWidth": true },
			{ "data": "wdaY_M2S_EX", "name": "wdaY_M2S_EX", "autoWidth": true },
			{ "data": "daY_EX", "name": "daY_EX", "autoWidth": true },
			{ "data": "montH_EX", "name": "montH_EX", "autoWidth": true },
			{ "data": "repeaT_EVERY_MINS", "name": "repeaT_EVERY_MINS", "autoWidth": true },
			{ "data": "repeaT_AFTER_FINISH", "name": "repeaT_AFTER_FINISH", "autoWidth": true },
			],
			select: {
				style: 'single',
				selector: 'td:not(:last-child)' // no row selection on last column
			},
			"language": {
				"url": "/lib/datatables/dist/locales/es/es.json"
			}
		});
		
		table.on('select', function (e, dt, type, indexes) {
			if (type === 'row'   ) {
				var nodes = table
				.rows(indexes)
				.nodes()
				.each(function () { 
					$('td:first-child', this).find('input').prop('checked', true);
				});
				selectedCrontab=table.rows( { selected: true }).data()[0].idcrontab;
				
			}
		});
		
		table.on('deselect', function (e, dt, type, indexes) {
			if (type === 'row') {
				$('#dt-crontab-select-all').prop("checked",false);
				table
				.rows(indexes)
				.nodes()
				.each(function () { 
					$('td:first-child', this).find('input').prop('checked', false); 
				});
			}
			selectedCrontab=0;
		});
		
		// Handle click on "Select all" control
		$('#dt-crontab-select-all-th').on('click', function() {
			if(table.settings()[0]._select.style=='multi')
			{ 
				// Get all rows with search applied
				var rows = table.rows({ 'search': 'applied' }).nodes();
				// Check/uncheck checkboxes for all rows in the table
				if(this.checked) {
					$('input[type="checkbox"]', rows).prop('checked', this.checked);
					var selData =   table.rows().select();
					var selData =   table.rows(".selected").data();
				}
				else 
				{
					var selData =   table.rows().deselect();
				}
			}
			else 
			return false;
		});
		
		// Handle click on checkbox to set state of "Select all" control
		$('#dt-crontab tbody').on('change', 'input[type="checkbox"]', function(){
			// If checkbox is not checked
			if(!this.checked){
				var el = $('#dt-crontab-select').get(0);
				// If "Select all" control is checked and has 'indeterminate' property
				if(el && el.checked && ('indeterminate' in el)){
					// Set visual state of "Select all" control
					// as 'indeterminate'
					el.indeterminate = true;
				}
			}
		});
		
		$('.bd-example-modal-lg').on('shown.bs.modal', function() {
			importNetwork(idproc);
		});
		
		$('#btnEDependencia').on('click', function() {
			$(".bd-example-modal-lg").modal("show");
		});
		
		//cuando el modal se muestra
		$('.bd-example-modal-sm').on('shown.bs.modal', function() {
			
			
			$(".bd-example-modal-lg").addClass("custom-class");
			
			$('#multiple-checkboxes').on("change",function() {
				$('.bd-example-modal-sm .btnaddDep').attr("disabled",false);
				nextnode=$(this).val();
			});
			
			$('.bd-example-modal-sm').on('hidden.bs.modal', function() {
				$(".bd-example-modal-lg").removeClass("custom-class");
			});     
			
			
			/* evento click boton modal para  agregar dependencia nodo */ 
			
			$('.bd-example-modal-sm .btnaddDep').on('click', function(e) {
			 
				let nodeTmp=getNode(nextnode);
				if(nodeTmp!=undefined)
				{
					Swal.fire ('El nodo seleccionado ya fue agregado', 'error')
					console.log("existe el nodo ",nodeTmp.id);
				}
				else 
				{
					e.stopPropagation();
					e.preventDefault();
					
					$(this).attr("disabled",true);
					let nextlevel=nodes._data[nodeId].level+1;
					 
                    var arrayData=nodes._data;
				console.log("demostrando el edit ",arrayData);
					var arData2 = $.map(arrayData,function(val,key) {
						 return val;
					});
					 var index = arData2.findIndex(p => p.id == nextnode);
if(index>=0){

console.log("lo encontramos en el edit ",index);
	
	return false;
}			
					 
					nodes.add({ id: nextnode, label: nextnode,level:nextlevel});
					edges.add({ from: nodeId, to: nextnode });
					elementactu=nextnode;
					levelactu=nextlevel;
					 arrayData=nodes._data;
					//procsDep=[];
					var arData = $.map(arrayData,function(val,key) {
						if(Number(val.id) !=nodeId) return val;
					});
					console.log("arData ",arData);
					
							procsDep.push({"IDPROC":idproc,"IDPROC_DEP":nextnode});
							  		
					//verificamos si el proceso seleccionado ya ha sido agregado al arreglo procsDep usado al guardar.
					$(arData).each(function(index, element) {
			console.log("evaluamos datos para agregar a arreglo a guardar  ",element);
								
						
						
						/*nodesnew= nodes;
						edgesnew= edges;*/
						   
						importNetwork(element.id);
					});
					
					//$(".bd-example-modal-sm").modal("hide");
					console.log("emos actualizado esto ",procsDep)
					network.moveTo({offset:{x:120,y:50}, position: {x:120, y: 150}});
				}
				
			}); 
			
			
		});//fin evento modal abierto
		
		var data_dependencias={oDependencias:{ "IDDEP" : 0,"IDPROC_DEP":0,"IDPROC":idproc}};
		
		$.ajax({
			method: "POST",
			async: true,
			dataType: "json",
			data: JSON.stringify(data_dependencias),
			contentType: "application/json; charset=utf-8",
			url: '@Url.Action("ListarDependencias", "Jobs")' ,
			success: function (response) { 
				$(response).each(function(index,item){
					$('#multiple-checkboxes')
					.append($('<option>')
					.text("("+item.idproc+")"+item.nombre)
					.attr('value', item.idproc));
				});
				
				$('#multiple-checkboxes').multiselect({
					includeSelectAllOption: true,
					enableFiltering: true,
					includeFilterClearBtn: true,
					enableCaseInsensitiveFiltering: true
				});       
			},
			error: function () {
				alert("Error while get data");
			}
		});
		
		
		
		$("#txtUptNombre").blur(function(){
			verifyName();
		});
		$("#txtUptNombre").on("change",function(){
			verifyName();
		});

 
	cargarDatos()
		
	});//fin document ready jquery
	
	function GuardarJobs() {
		id_conex = $('#slcUptIdConex').val();
		nombre = $('#txtUptNombre').val();
		descripcion = $('#txtUptDescripcion').val();
		path = $('#txtUptPath').val();
		param1 = $('#txtUptParametro1').val();
		param2 = $('#txtUptParametro2').val();
		param3 = $('#txtUptParametro3').val();
		param4 = $('#txtUptParametro4').val();
		intentos = $('#txtUptIntentos').val();
		espera_intento = $('#txtUptEsperaIntento').val();
		estado = $('#txtUptEstado').val();
		id_host = $('#txtUptIdHost').val();
		id_notif = $('#txtUptNotifications').val();
		
		node = $('#txtUptNode').val();
		
		var data_job={
			"oProcesos" : {
				"IDPROC" : idproc,
				"IDCONEX": id_conex,
				"NOMBRE" : nombre,
				"DESCRIPCION" : descripcion,
				"PATH" : path,
				"PARAMETRO1" : param1,
				"PARAMETRO2" : param2,
				"PARAMETRO3" : param3,
				"PARAMETRO4" : param4,
				"DEPENDENCIA" : $('#checkUptDependencia').is(":checked") ? 1 : 0,
				"INTENTOS" : intentos,
				"ESPERA_INTENTO" : parseInt(espera_intento,10),
				"ESTADO" : estado,
				"IDNOTIF" : id_notif,
				"FTP" : $('#flexUptCheckFtp').is(":checked") ? 1 : 0,
				"IDHOST" : parseInt(id_host,10),
				"COMPRESION" : $('#flexCheckUptCompresion').is(":checked") ? 1 : 0,
				"IDCRONTAB" : selectedCrontab,
				"NODE" : node
			},
			"oDependencias" : procsDep
		};
		
		if (idproc != 0 && existeNombre==false) {
			jQuery.ajax({
				method: "POST",
				async: true,
				dataType: "json",
				data: JSON.stringify(data_job),
				contentType: "application/json; charset=utf-8",
				url: "@Url.Action("Update","Jobs")",
				
				success: function (data) {
					
					if(data.error)
					{
						Swal.fire ('Duplicidad...', data.msg, 'error')
					}
					else
					Swal.fire({
						title: "Jobs Actualizado!",
						text: "Click en aceptar para ver los procesos!",
						icon: "success",
						confirmButtonText: "Aceptar",
						}).then((result) => {
						if (result.isConfirmed) {
							$(location).attr("href","@Url.Action("Index","Jobs")")
						}  
					});
				}
			});
			} else {
			$("#slcUptIdConex").val("");
			$("#txtUptNombre").val("");
			$("#txtUptDescripcion").val("");
			$("#txtUptPath").val("");
			$("#txtUptParametro1").val("");
			$("#txtUptParametro2").val("");
			$("#txtUptParametro3").val("");
			$("#txtUptParametro4").val("");
			$("#txtUptIntentos").val("");
			$("#txtUptEsperaIntento").val("");
			$("#txtUptIdHost").val("");
			$("#txtUptNode").val("");
		}
	}
	
	//importando red de nodos guardada.
	//funciones utilizadas para manipular los nodos
	/******************************************************************/
	
	 function utf8_encode(argString) {
  //  discuss at: https://locutus.io/php/utf8_encode/
  // original by: Webtoolkit.info (https://www.webtoolkit.info/)
  // improved by: Kevin van Zonneveld (https://kvz.io)
  // improved by: sowberry
  // improved by: Jack
  // improved by: Yves Sucaet
  // improved by: kirilloid
  // bugfixed by: Onno Marsman (https://twitter.com/onnomarsman)
  // bugfixed by: Onno Marsman (https://twitter.com/onnomarsman)
  // bugfixed by: Ulrich
  // bugfixed by: RafaÅ‚ Kukawski (https://blog.kukawski.pl)
  // bugfixed by: kirilloid
  //   example 1: utf8_encode('Kevin van Zonneveld')
  //   returns 1: 'Kevin van Zonneveld'

  if (argString === null || typeof argString === 'undefined') {
    return ''
  }

  // .replace(/\r\n/g, "\n").replace(/\r/g, "\n");
  const string = argString + ''
  let utftext = ''
  let start
  let end
  let stringl = 0

  start = end = 0
  stringl = string.length
  for (let n = 0; n < stringl; n++) {
    let c1 = string.charCodeAt(n)
    let enc = null

    if (c1 < 128) {
      end++
    } else if (c1 > 127 && c1 < 2048) {
      enc = String.fromCharCode((c1 >> 6) | 192, (c1 & 63) | 128)
    } else if ((c1 & 0xf800) !== 0xd800) {
      enc = String.fromCharCode((c1 >> 12) | 224, ((c1 >> 6) & 63) | 128, (c1 & 63) | 128)
    } else {
      // surrogate pairs
      if ((c1 & 0xfc00) !== 0xd800) {
        throw new RangeError('Unmatched trail surrogate at ' + n)
      }
      const c2 = string.charCodeAt(++n)
      if ((c2 & 0xfc00) !== 0xdc00) {
        throw new RangeError('Unmatched lead surrogate at ' + (n - 1))
      }
      c1 = ((c1 & 0x3ff) << 10) + (c2 & 0x3ff) + 0x10000
      enc = String.fromCharCode((c1 >> 18) | 240, ((c1 >> 12) & 63) | 128, ((c1 >> 6) & 63) | 128, (c1 & 63) | 128)
    }
    if (enc !== null) {
      if (end > start) {
        utftext += string.slice(start, end)
      }
      utftext += enc
      start = end = n + 1
    }
  }

  if (end > start) {
    utftext += string.slice(start, stringl)
  }

  return utftext
}

function utf8_decode(strData) {
  //  discuss at: https://locutus.io/php/utf8_decode/
  // original by: Webtoolkit.info (https://www.webtoolkit.info/)
  //    input by: Aman Gupta
  //    input by: Brett Zamir (https://brett-zamir.me)
  // improved by: Kevin van Zonneveld (https://kvz.io)
  // improved by: Norman "zEh" Fuchs
  // bugfixed by: hitwork
  // bugfixed by: Onno Marsman (https://twitter.com/onnomarsman)
  // bugfixed by: Kevin van Zonneveld (https://kvz.io)
  // bugfixed by: kirilloid
  // bugfixed by: w35l3y (https://www.wesley.eti.br)
  //   example 1: utf8_decode('Kevin van Zonneveld')
  //   returns 1: 'Kevin van Zonneveld'

  const tmpArr = []
  let i = 0
  let c1 = 0
  let seqlen = 0

  strData += ''

  while (i < strData.length) {
    c1 = strData.charCodeAt(i) & 0xff
    seqlen = 0

    // https://en.wikipedia.org/wiki/UTF-8#Codepage_layout
    if (c1 <= 0xbf) {
      c1 = c1 & 0x7f
      seqlen = 1
    } else if (c1 <= 0xdf) {
      c1 = c1 & 0x1f
      seqlen = 2
    } else if (c1 <= 0xef) {
      c1 = c1 & 0x0f
      seqlen = 3
    } else {
      c1 = c1 & 0x07
      seqlen = 4
    }

    for (let ai = 1; ai < seqlen; ++ai) {
      c1 = (c1 << 0x06) | (strData.charCodeAt(ai + i) & 0x3f)
    }

    if (seqlen === 4) {
      c1 -= 0x10000
      tmpArr.push(String.fromCharCode(0xd800 | ((c1 >> 10) & 0x3ff)))
      tmpArr.push(String.fromCharCode(0xdc00 | (c1 & 0x3ff)))
    } else {
      tmpArr.push(String.fromCharCode(c1))
    }

    i += seqlen
  }

  return tmpArr.join('')
}

	function getRandomColor() {
    var letters = '0123456789ABCDEF'.split('');
    var color = '#';
    for (var i = 0; i < 6; i++ ) {
        color += letters[Math.floor(Math.random() * 16)];
    }
    
    return color;
}
	
	function getNode(nodeId){
		var nodeObj= network.body.data.nodes._data[nodeId];
		return nodeObj;  
	}
	function getEdgeData(data) {
		var networkEdges = [];
		
		data.forEach(function(node) {
			// add the connection
			node.connections.forEach(function(connId, cIndex, conns) {
			  var color="";
  color=getRandomColor();
				networkEdges.push({from: node.id, to: connId,arrows:'from',color: {
      color:color,
      highlight:color,
      hover: color,
      inherit: 'from',
      opacity:2.0
    }});
				let cNode = getNodeById(data, connId);
				
				var elementConnections = cNode.connections;
				
				// remove the connection from the other node to prevent duplicate connections
				var duplicateIndex = elementConnections.findIndex(function(connection) {
					return connection == node.id; // double equals since id can be numeric or string
				});
				
				if (duplicateIndex != -1) {
					elementConnections.splice(duplicateIndex, 1);
				};
			});
		});
		
		return new vis.DataSet(networkEdges);
	}
	
	function getNodeData(data) {
		var networkNodes = [];
		
		data.forEach(function(elem, index, array) {
		 	networkNodes.push({id: elem.id, title:utf8_decode(elem.title),label: String(elem.id), /*x: elem.x, y: elem.y,*/level:elem.level});
		});
		
		return new vis.DataSet(networkNodes);
	}
	
	function getNodeById(data, id) {
		for (var n = 0; n < data.length; n++) {
			if (data[n].id == id) {  // double equals since id can be numeric or string
				return data[n];
			}
		};
		
		throw 'Can not find id \'' + id + '\' in data';
	}
	/************************************************************************/

	function getEdgeBetweenNodes(node1,node2) {
    return edges.get().filter(function (edge) {
        return (edge.from === node1 && edge.to === node2 )|| (edge.from === node2 && edge.to === node1);
    });
};

function getEdgesOfNode(nodeId) {
  return edges.get().filter(function (edge) {
      if(edge.from === nodeId && edge.to !=idproc)
	  nodes.remove(edge.to);
	  if(edge.to === nodeId && edge.from !=idproc)
	  nodes.remove(edge.from);

    return edge.from != nodeId && edge.to != nodeId;
  });
}
	function importNetwork(prc_id) {
        console.log("para el import ",prc_id);
		if (prc_id != 0) {


			jQuery.ajax({
				method: "POST",
				async: true,
				data: {prcId:prc_id},
				url: "@Url.Action("GetAllNodeData","Jobs")",
				
				success: function (data) {
					let elementid=0;
			 
					draw(data,true,prc_id,elementid);
				}
			});
			
		}
		
	}
	
	/*funcion para limpiar red de nodos */
	function destroy() {
		if (network !== null) {
			network.destroy();
			network = null;
		}
	}
	/*fin funcion para limpiar red de nodos */
	
	//funcion draw que se encarga de pintar el arbol de nodos
	function draw(dataNodes,flag=false,prcid=0,prccid=0) {
		//destroy();
		
		nodestmp=getNodeData(dataNodes.data);
		edgestmp= getEdgeData(dataNodes.data);
		console.log(" tiene _data ",nodestmp._data);
		console.log(" tiene nodes x  ",nodes);
		/*if(nodesnew!=null && edgesnew!=null){
	    nodes=nodesnew;
	    edges=edgesnew;
		}  */ 
		   console.log("nodos extendidos ",nodes);
	   console.log("edges extendidos ",edges);
	   if(nodes!=null && edges!=null){
		 console.log("hay valores extendemos nodes con nodestmp ",nodes,"  nodestmp ",nodestmp);
	   $.extend( nodes._data, nodestmp._data);    
	   $.extend( edges._data, edgestmp._data);    
	   }
	   else
	   {
			 console.log("no hay valores extendemos nodes con nodestmp ",nodes);
		nodes  =nodestmp; 
		edges  =edgestmp; 

		 console.log("no hay valores extendemos nodes con nodestmp ",nodes);
	   }
	    			
		
		  datatmp=nodes._data;
	   console.log("nodos extendidos ",nodes["_data"]);
	   console.log("edges extendidos ",edges["_data"]);
	
for (let i in datatmp) {
            console.log("nodes  i ", datatmp[i].level);
       
	   datatmp[i].mass=10
         }
	      nodestmp._data=datatmp;
 $.extend( nodes._data, nodestmp._data );
 


	 
		// obtenemos el id del div que contendra la red de nodos
		var container = document.getElementById('mynetwork');
		
   // create an array with nodes


  // create a network
 
  var data = {
    nodes: nodes,
    edges: edges
  };
 var options = {
   /* layout: {
                    hierarchical: {
                        direction: 'DU',
						sortMethod: 'directed'
                    }
                },*/
         edges: {
      smooth: {
                        type: 'cubicBezier',
                        forceDirection: 'vertical',
                        roundness: 0.4
                    },
					
    },
   physics: {
      enabled: false
    },
	
  };
  		
		//recorrido de nodos actuales obtenidos en peticion 
		/*$(nodes._data).each(function(index, element) {
			for(var i in element)
			$(element [i]).each(function(index2, element2) {
				if(idproc!=element2.id && element2.id!=elementactu)
				procsDep.push({"IDPROC":idproc,"IDPROC_DEP":element2.id});
			});
		});*/
		//fin recorrido de nodos actuales obtenidos en peticion 
		
		//inicializamos el objeto vis para pintar red de nodos 
		network = new vis.Network(container, data, options);
		
		
		/*funcion para oculta menu contextual al hacer click en alguna zona de la red de nodos*/
		network.on("click", function (params) {
			
			$(".custom-menu").hide(100);
			
		});
		/* fin funcion para oculta menu contextual al hacer click en alguna zona de la red de nodos*/
		
		
		/*funcion para ocultar menu contextual al hacer doble click en alguna zona de la red de nodos*/
		network.on("doubleClick", function (params) {
			$(".custom-menu").hide(100);
		});
		/*fin funcion para ocultar menu contextual al hacer doble click en alguna zona de la red de nodos*/
		
			
		/*funcion para ocultar menu contextual al pasar el cursor por algun nodo*/
		network.on("hoverNode", function (params) {
			$(".custom-menu").hide(100);
			});
		/*fin funcion para ocultar menu contextual al pasar el cursor por algun nodo*/
		
		/*funcion para posicionar red de nodos al pintarse*/
		 network.once('initRedraw', function() {
			network.moveTo({offset:{x:120,y:50}, position: {x:120, y: 150}})
		})
		/*fin funcion para posicionar red de nodos al pintarse*/

		
		/*evento para el menu contextual al dar click derecho en algun nodo*/
		network.on("oncontext", function (params) {
			
			nodeId=this.getNodeAt(params.pointer.DOM);
			nodoSelected=getNode(nodeId);
			if(nodoSelected.level<=1)
			{ 
          
			if(nodeId!=undefined){
				var { x: nodeX, y: nodeY } = network.canvasToDOM(
				network.getPositions([nodeId])[nodeId]
				);
				
				params.event.preventDefault();
				$(".custom-menu").finish().toggle(100);
				
				//if(nodes._data[nodeId].level+1==1)
				//{ 
					
					$(".custom-menu #firstli").hide();
					if(nodoSelected.level==0){ 
                     $(".custom-menu #firstli").show();
                     $(".custom-menu #firstli").html("Agregar dependencia "+nodeId);
					}
					
				//}
				//else 	
				// $(".custom-menu #firstli").hide();
				$(".custom-menu").css({
					
					top: nodeY + "px",
					left: nodeX + "px"
				});
			}
			}
			else 
			return false;
		});
		/*fin evento para el menu contextual al dar click derecho en algun nodo*/
	    	
		network.on("showPopup", function(nodeID) {
	console.log("popup");
			if (nodeID) {
			  var sNodeLabel = this.body.nodes[nodeID].options.label
			  var sToolTip = this.body.nodes[nodeID].options.title;
			  
			var textHtml='<div style="padding: 10px; border: 1px solid rgb(77, 77, 77); color: rgb(26, 26, 26); background: rgba(255, 255, 255, 0.7); border-radius: 10px; box-shadow: rgba(128, 128, 128, 0.5) 5px 5px 10px;"> <b>'+sToolTip+' </b><br></div>';
			$(".vis-tooltip").html(textHtml);
			
			}
		
	});
	
	
		/*click en elementos del menu contextual*/
		$(".custom-menu li").click(function(){
			
			if(nodeId!=undefined){
				
				switch($(this).attr("data-action")) {
					
					case "first": 
					
					$('#multiple-checkboxes').multiselect('select', 0);$('#multiple-checkboxes').multiselect('refresh');
					$(".bd-example-modal-sm").modal("show");
					
					break;
					case "second":
					if(nodeId!=idproc){ 
						
						nodes.remove(nodeId);
					//	edges.remove(nodeId);
                     edges = getEdgesOfNode(nodeId);
					
console.log("edges luego de borrar  ",edges,"  el edge con id ",nodeId);


                       console.log("vamos a borrar del array ",procsDep)
							procsDep = procsDep.filter(function( obj ) {
							return obj.IDPROC_DEP !== nodeId;
							});
						 console.log("despues de borrar ",procsDep)
					}
					
					break;
					case "third": console.log("seleccionaste third"); break;
				}
			}
			$(".custom-menu").hide(100);
		});
		/*fin click en elementos del menu contextual*/
		
	}
</script>