@{
  ViewData["Title"] = "Edit";
}
<head>
  <link rel="stylesheet" href="~/css/datatables.min.css" />
  <link rel="stylesheet" href="~/lib/Toast/dist/jquery.toast.min.css" />
     <link rel="stylesheet" href="~/lib/bootstrap/3.3.4/css/bootstrap.min.css" /> 
  <link rel="stylesheet" href="~/lib/SweetAlert/dist/sweetalert2.min.css" />
  <link rel="stylesheet" href="~/lib/Vis/dist/vis-network.min.css" rel="stylesheet" type="text/css"/>
  <script src="~/js/jquery-1.11.3.min.js"></script>
  <script src="~/js/pdfmake.min.js"></script>
  <script src="~/js/vfs_fonts.js"></script>
  <script src="~/js/datatables.min.js"></script>
  <script src="~/lib/SweetAlert/dist/sweetalert2.min.js"></script>
  <script src="~/lib/Toast/dist/jquery.toast.min.js"></script>
     <script src="~/lib/Vis/dist/vis.js"></script>
   <script src="~/lib/bootstrap/3.3.4/js/bootstrap.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap-multiselect.js"></script>
    <style>
  #mynetwork {
            width: 700px;
            height: 800px;
            border: 1px solid lightgray;
            align:center;
        }

  	/* CSS3 */

/* The whole thing */
.custom-menu {
    display: none;
    z-index: 1000;
    position: absolute;
    overflow: hidden;
    border: 1px solid #CCC;
    white-space: nowrap;
    font-family: sans-serif;
    background: #FFF;
    color: #333;
    border-radius: 5px;
    padding: 0;
}

/* Each of the items in the list */
.custom-menu li {
    padding: 8px 12px;
    cursor: pointer;
    list-style-type: none;
    transition: all .3s ease;
    user-select: none;
}

.custom-menu li:hover {
    background-color: #DEF;
}      
.bd-example-modal-lg.modal.custom-class {
	z-index: 1029
}

.bd-example-modal-sm.custom-class {
	z-index: 1050
}
  </style>
</head>

<h1>Editar Jobs</h1>
<br />
<div class="card">
  <div class="card-header">
    <a id="btnSaveJobs" onclick="GuardarJobs()" class="btn btn-primary">Guardar</a>
  </div>
  <div class="card-body">
    <div class="row g-4 align-items-center">
      <div class="col-auto">
        <label for="TittleProc" class="col-form-label">IDPROC</label>
      </div>
      <div class="col-auto">
        <label for="txtIdProc" class="col-form-label">@Model.IDPROC</label>
      </div>
      <div class="col-auto">
        <label for="TittleConex" class="col-form-label">IDCONEX</label>
      </div>
      <div class="col-auto">
        <input type="number" min="1" class="form-control" data-placement="right" data-align="top" data-autoclose="true" id="IdUptConex" name="IdUptConex">
      </div>
    </div>
    <br />

    <div class="container">
      <div class="row">
        <div class="col-auto">
          <label for="TittleNombre" class="col-form-label">NOMBRE</label>
        </div>
        <div class="col-6">
          <input type="text" min="1" class="form-control" data-placement="right" data-align="top" data-autoclose="true" id="txtUptNombre" name="txtUptNombre">
        </div>
      </div>
    </div>
    <br />

    <div class="container">
      <div class="row">
        <div class="col-auto">
          <label for="TittleDescrpcion" class="col-form-label">DESCRIPCIÃ“N</label>
        </div>
        <div class="col-6">
          <input type="text" min="1" class="form-control" data-placement="right" data-align="top" data-autoclose="true" id="txtUptDescripcion" name="txtUptDescripcion">
        </div>
      </div>
    </div>
    <br />

    <div class="container">
      <div class="row">
        <div class="col-auto">
          <label for="TittlePath" class="col-form-label">PATH</label>
        </div>
        <div class="col-6">
          <input type="text" min="1" class="form-control" data-placement="right" data-align="top" data-autoclose="true" id="txtUptPath" name="txtUptPath">
        </div>
      </div>
    </div>
    <br />

    <div class="container">
      <div class="row">
        <div class="col-auto">
          <label for="TittleParametro1" class="col-form-label">PARAMETRO1</label>
        </div>
        <div class="col-6">
          <input type="text" min="1" class="form-control" data-placement="right" data-align="top" data-autoclose="true" id="txtUptParametro1" name="txtUptParametro1">
        </div>
      </div>
    </div>
    <br />

    <div class="container">
      <div class="row">
        <div class="col-auto">
          <label for="TittleParametroDos" class="col-form-label">PARAMETRO2</label>
        </div>
        <div class="col-6">
          <input type="text" min="1" class="form-control" data-placement="right" data-align="top" data-autoclose="true" id="txtUptParametro2" name="txtUptParametro2">
        </div>
      </div>
    </div>
    <br />

    <div class="container">
      <div class="row">
        <div class="col-auto">
          <label for="TittleParametroTres" class="col-form-label">PARAMETRO3</label>
        </div>
        <div class="col-6">
          <input type="text" min="1" class="form-control" data-placement="right" data-align="top" data-autoclose="true" id="txtUptParametro3" name="txtParametro3">
        </div>
      </div>
    </div>
    <br />

    <div class="container">
      <div class="row">
        <div class="col-auto">
          <label for="TittleParametroCuatro" class="col-form-label">PARAMETRO4</label>
        </div>
        <div class="col-6">
          <input type="text" min="1" class="form-control" data-placement="right" data-align="top" data-autoclose="true" id="txtUptParametro4" name="txtUptParametro4">
        </div>
      </div>
    </div>
    <br />

    <div class="row g-4 align-items-center">
      <div class="col-auto">
        <div class="form-check">
          <input class="form-check-input" type="checkbox" value="" id="checkUptDependencia" name="checkUptDependencia">
            <label class="form-check-label" for="IdDependencia">
              DEPENDENCIA
            </label>
        </div>
      </div>
      <div class="col-auto">
        <label class="form-check-label" for="lblIntentos">
          INTENTOS
        </label>
      </div>
      <div class="col-auto">
        <input type="number" min="1" class="form-control" data-placement="right" data-align="top" data-autoclose="true" id="txtUptIntentos" name="txtUptIntentos">
      </div>
      <div class="col-auto">
        <label class="form-check-label" for="lblEsperaIntento">
          ESPERA INTENTO
        </label>
      </div>
      <div class="col-auto">
        <input type="number" min="1" class="form-control" data-placement="right" data-align="top" data-autoclose="true" id="txtUptEsperaIntento" name="txtUptEsperaIntento">
      </div>
      <div class="col-auto">
        <label class="form-check-label" for="lblEstado">
          ESTADO
        </label>
      </div>
      <div class="col-auto">
        <select class="form-select" name="txtUptEstado" id="txtUptEstado">
          <option value="Activo">ACTIVO</option>
          <option value="Inactivo">INACTIVO</option>
          <option value="Internal">INTERNAL</option>
        </select>
      </div>
      <div class="col-auto">
        <div class="form-check">
          <input class="form-check-input" type="checkbox" value="" id="flexUptCheckFtp">
          <label class="form-check-label" for="lblFtp">
            FTP
          </label>
        </div>
      </div>
      <div class="col-auto">
        <label class="form-check-label" for="lblIdHost">
          IDHOST
        </label>
      </div>
      <div class="col-auto">
        <input type="number" min="1" class="form-control" data-placement="right" data-align="top" data-autoclose="true" id="txtUptIdHost" name="txtUptIdHost">
      </div>
      <div class="col-auto">
        <div class="form-check">
          <input class="form-check-input" type="checkbox" value="" id="flexCheckUptCompresion" name="flexCheckUptCompresion">
          <label class="form-check-label" for="lblflexCheckComprension">
            COMPRESION
          </label>
        </div>
      </div>
      <div class="col-auto">
        <label class="form-check-label" for="lblNode">
          NODE
        </label>
      </div>
      <div class="col-auto">
        <input type="text" min="1" class="form-control" data-placement="right" data-align="top" data-autoclose="true" id="txtUptNode" name="txtUptNode">
      </div>

      <div class="col-auto">
         <button type="button" class="btn btn-info" id="btnEDependencia" data-target=".bd-example-modal-lg" name="btnEDependencia" disabled>Editar Dependencia</button>
      </div>

    </div>
  </div>
  <div class="card-footer text-muted">
    <h4 style="text-align: center;">Editar crontab asociado</h4>
  </div>
</div>

<div class="container">
  <table id="dt-crontab" class="display nowrap" width="100%">
    <thead>
      <tr>
        <th><input type="checkbox" name="select_all" class="dt-column-title" value="1" id="dt-crontab-select-all-th"></th>
        <th style="font-size:13px;">IDCRONTAB</th>
        <th style="font-size:13px;">HORA INICIO</th>
        <th style="font-size:13px;">HORA FIN</th>
        <th style="font-size:13px;">DAYS</th>
        <th style="font-size:13px;">DAY EXE</th>
        <th style="font-size:13px;">MONTHS</th>
        <th style="font-size:13px;">REPEAT EVERY MINS</th>
        <th style="font-size:13px;">REPEAT AFTER FINISH</th>
      </tr>
    </thead>
    <tbody>
    </tbody>
  </table>
</div>
   <div class="modal fade bd-example-modal-lg" id="bd-example-modal-lg" tabindex="-1" role="dialog" aria-labelledby="basicModal">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h4 class="modal-title" id="myModalLabel">Dependencias</h4>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
      
      </div>
      <div class="modal-body">
            <ul class='custom-menu'>
  <li data-action="first" id="firstli">Agregar Dependencia</li>
  <li data-action="second">Borrar Dependencia</li>
  <li data-action="third">Cancelar</li>
 
</ul>
      		<div id="mynetwork">
      			
      		</div>        	
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

   <div class="modal fade bd-example-modal-sm" id="bd-example-modal-sm" tabindex="-1" role="dialog" aria-labelledby="basicModal">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h4 class="modal-title" id="myModalLabel">Proceso</h4>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
      </div>
      <div class="modal-body">
        <div class="">
          <strong>Seleccionar dependencia:</strong>
          <select id="multiple-checkboxes">
            <option value="0">Seleccione proceso</option>
          </select>
        </div>      	
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-info btnaddDep">Guardar</button>
        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>
<script> 
  var params={};
  var table={};
  var idjob="";
let procsDep=[];
  var idproc="@Model.IDPROC";
  params.idproc=idproc;

  var id_conex = "@Model.IDCONEX";
  var nombre = "@Model.NOMBRE";
  var descripcion = "@Model.DESCRIPCION";
  var path = "@Model.PATH";
  var param1 = "@Model.PARAMETRO1";
  var param2 = "@Model.PARAMETRO2";
  var param3 = "@Model.PARAMETRO3";
  var param4 = "@Model.PARAMETRO4";
  var dependencia = "@Model.DEPENDENCIA";
  var intentos = "@Model.INTENTOS";
  var espera_intento = "@Model.ESPERA_INTENTO";
  var estado = "@Model.ESTADO";
  var ftp = "@Model.FTP";
  var id_host = "@Model.IDHOST";
  var compresion = "@Model.COMPRESION";
  var node = "@Model.NODE";
  var idcrontab = "@Model.IDCRONTAB";
  var selectedCrontab = "@Model.IDCRONTAB";
  
  String.prototype.decodeHTML = function() {
    return $('<div>').html(this).text();
  };
 
  $(document).ready( function () {
    $("#IdUptConex").val(id_conex);
    $("#txtUptNombre").val(nombre);
    $("#txtUptDescripcion").val(descripcion.decodeHTML());
    $("#txtUptPath").val(path);
    $("#txtUptParametro1").val(param1.decodeHTML());
    $("#txtUptParametro2").val(param2.decodeHTML());
    $("#txtUptParametro3").val(param3.decodeHTML());
    $("#txtUptParametro4").val(param4.decodeHTML());

    if(dependencia == 1) {
      $("#checkUptDependencia").prop('checked', true);
      $("#btnEDependencia").prop('disabled', false);
    } else {
      $("#checkUptDependencia").prop('checked', false);
       $("#btnEDependencia").prop('disabled', true);
    }

    $("#txtUptIntentos").val(intentos);
    $("#txtUptEsperaIntento").val(espera_intento);
    $("#txtUptEstado").val(estado);

    $("#txtUptNode").val(node);

    if(ftp == 1) {
      $("#flexUptCheckFtp").prop('checked', true);
    } else {
      $("#flexUptCheckFtp").prop('checked', false);
    }

    $("#txtUptIdHost").val(id_host);

    if(compresion == 1) {
      $("#flexCheckUptCompresion").prop('checked', true);
    } else {
      $("#flexCheckUptCompresion").prop('checked', false);
    }

    var table = $('#dt-crontab').DataTable( {
      "processing": true,
      "serverSide": true,
      "paging": true,
	    "deferLoading": 0, // here
      "scrollX":          true,
      "sScrollX":         "50%",
      "scrollY":            $(document).height() - 300,
      "scrollCollapse":     true,
      "ajax": {
        "url": "@Url.Action("ListarCrontabs","Calendario")",
        "type": "POST",
        "datatype": "json",
		    "data": function(d){
          $.extend( d, params);    
        }
      },
      drawCallback: function(settings){ 
        if($(this).find('tbody tr').length <= 1){
        $('.dt-paging-button').hide();
      }
    },rowCallback: function (row, data) {
      if (data.idcrontab == idcrontab) {
        table.row(row).select()
      }  
    },
    "columnDefs": [{
      'targets': 0,
    orderable: false
    } 
    ],
    "columns": [
      {
        "render": function (data,row) { return '<input type="radio" name="select_all" class="dt-column-title" value="1" id="dt-crontab-select-item">';   }
      },
      { "data": "idcrontab", "name": "idcrontab", "autoWidth": true },
        { "data": "horA_INICIO", "name": "horA_INICIO", "autoWidth": true },
        { "data": "horA_FIN", "name": "horA_FIN", "autoWidth": true },
        { "data": "wdaY_M2S_EX", "name": "wdaY_M2S_EX", "autoWidth": true },
        { "data": "daY_EX", "name": "daY_EX", "autoWidth": true },
        { "data": "montH_EX", "name": "montH_EX", "autoWidth": true },
        { "data": "repeaT_EVERY_MINS", "name": "repeaT_EVERY_MINS", "autoWidth": true },
        { "data": "repeaT_AFTER_FINISH", "name": "repeaT_AFTER_FINISH", "autoWidth": true },
      ],
      select: {
      style: 'single',
      selector: 'td:not(:last-child)' // no row selection on last column
      },
      "language": {
      "url": "/lib/datatables/dist/locales/es/es.json"
      }
    });

    table.on('select', function (e, dt, type, indexes) {
      if (type === 'row'   ) {
        var nodes = table
        .rows(indexes)
        .nodes()
        .each(function () { 
          $('td:first-child', this).find('input').prop('checked', true);
        });
        selectedCrontab=table.rows( { selected: true }).data()[0].idcrontab;
       
      }
    });

    table.on('deselect', function (e, dt, type, indexes) {
      if (type === 'row') {
      $('#dt-crontab-select-all').prop("checked",false);
        table
        .rows(indexes)
        .nodes()
        .each(function () { 
          $('td:first-child', this).find('input').prop('checked', false); 
        });
      }
      selectedCrontab=0;
    });
    
    // Handle click on "Select all" control
    $('#dt-crontab-select-all-th').on('click', function() {
      if(table.settings()[0]._select.style=='multi')
      { 
        // Get all rows with search applied
        var rows = table.rows({ 'search': 'applied' }).nodes();
        // Check/uncheck checkboxes for all rows in the table
        if(this.checked) {
          $('input[type="checkbox"]', rows).prop('checked', this.checked);
          var selData =   table.rows().select();
          var selData =   table.rows(".selected").data();
        }
        else 
        {
          var selData =   table.rows().deselect();
        }
      }
      else 
      return false;
    });

    // Handle click on checkbox to set state of "Select all" control
    $('#dt-crontab tbody').on('change', 'input[type="checkbox"]', function(){
      // If checkbox is not checked
        if(!this.checked){
        var el = $('#dt-crontab-select').get(0);
        // If "Select all" control is checked and has 'indeterminate' property
        if(el && el.checked && ('indeterminate' in el)){
          // Set visual state of "Select all" control
          // as 'indeterminate'
          el.indeterminate = true;
        }
      }
    });
	
	  $('.bd-example-modal-lg').on('shown.bs.modal', function() {
    importNetwork(idproc);
  });

  $('#btnEDependencia').on('click', function() {
    $(".bd-example-modal-lg").modal("show");
  });

  $('.bd-example-modal-sm').on('shown.bs.modal', function() {
    $(".bd-example-modal-lg").addClass("custom-class");

 
          $('#multiple-checkboxes').on("change",function(){
 $('.bd-example-modal-sm .btnaddDep').attr("disabled",false);
          nextnode=$(this).val();

          });

       $('.bd-example-modal-sm').on('hidden.bs.modal', function() {
    $(".bd-example-modal-lg").removeClass("custom-class");
  });     
    
 $('.bd-example-modal-sm .btnaddDep').on('click', function(e) {
  console.log("esto es el evento click en adddep")
  e.stopPropagation();
  e.preventDefault();

 
  $(this).attr("disabled",true);
  	let nextlevel=nodes._data[nodeId].level+1;
 
    	nodes.add({ id: nextnode, label: nextnode,level:nextlevel});
		edges.add({ from: nodeId, to: nextnode });

   var arrayData=nodes._data;
     procsDep=[];
      var arData = $.map(arrayData,function(val,key) {
      /*if(Number(val.id) !=nodeId) */return val;
      });
      $(arData).each(function(index, element){

       if(element.id!=idproc)
        procsDep.push({"IDPROC":idproc,"IDPROC_DEP":element.id});
   
});
});



  });
  
  
  
      var data_dependencias={oDependencias:{ "IDDEP" : 0,"IDPROC_DEP":0,"IDPROC":idproc}};
 
      $.ajax({
        method: "POST",
        async: true,
        dataType: "json",
        data: JSON.stringify(data_dependencias),
        contentType: "application/json; charset=utf-8",
        url: '@Url.Action("ListarDependencias", "Jobs")' ,
        success: function (response) { 
          $(response).each(function(index,item){
            $('#multiple-checkboxes')
            .append($('<option>')
            .text(item.nombre)
            .attr('value', item.idproc));
          });
          
          $('#multiple-checkboxes').multiselect({
            includeSelectAllOption: true,
          });       
      },
      error: function () {
        alert("Error while get data");
      }
    });

  });

  function GuardarJobs() {
    id_conex = $('#IdUptConex').val();
    nombre = $('#txtUptNombre').val();
    descripcion = $('#txtUptDescripcion').val();
    path = $('#txtUptPath').val();
    param1 = $('#txtUptParametro1').val();
    param2 = $('#txtUptParametro2').val();
    param3 = $('#txtUptParametro3').val();
    param4 = $('#txtUptParametro4').val();
    intentos = $('#txtUptIntentos').val();
    espera_intento = $('#txtUptEsperaIntento').val();
    estado = $('#txtUptEstado').val();
    id_host = $('#txtUptIdHost').val();
    node = $('#txtUptNode').val();

    var data_job={
      "oProcesos" : {
      "IDPROC" : idproc,
      "IDCONEX": id_conex,
      "NOMBRE" : nombre,
      "DESCRIPCION" : descripcion,
      "PATH" : path,
      "PARAMETRO1" : param1,
      "PARAMETRO2" : param2,
      "PARAMETRO3" : param3,
      "PARAMETRO4" : param4,
      "DEPENDENCIA" : $('#checkUptDependencia').is(":checked") ? 1 : 0,
      "INTENTOS" : intentos,
      "ESPERA_INTENTO" : parseInt(espera_intento,10),
      "ESTADO" : estado,
      "FTP" : $('#flexUptCheckFtp').is(":checked") ? 1 : 0,
      "IDHOST" : parseInt(id_host,10),
      "COMPRESION" : $('#flexCheckUptCompresion').is(":checked") ? 1 : 0,
      "IDCRONTAB" : selectedCrontab,
      "NODE" : node
    },
     "oDependencias" : procsDep
  };
   
  if (idproc != 0) {
    jQuery.ajax({
    method: "POST",
    async: true,
    dataType: "json",
    data: JSON.stringify(data_job),
    contentType: "application/json; charset=utf-8",
    url: "@Url.Action("Update","Jobs")",

    success: function (data) {
      
      if(data.error)
      {
      Swal.fire ('Duplicidad...', data.msg, 'error')

      }
      else
      Swal.fire({
        title: "Jobs Actualizado!",
        text: "Click en aceptar para ver los procesos!",
        icon: "success",
        confirmButtonText: "Aceptar",
      }).then((result) => {
      if (result.isConfirmed) {
        $(location).attr("href","@Url.Action("Index","Jobs")")
      }  
    });
  }
});
} else {
  $("#IdUptConex").val("");
  $("#txtUptNombre").val("");
  $("#txtUptDescripcion").val("");
  $("#txtUptPath").val("");
  $("#txtUptParametro1").val("");
  $("#txtUptParametro2").val("");
  $("#txtUptParametro3").val("");
  $("#txtUptParametro4").val("");
  $("#txtUptIntentos").val("");
  $("#txtUptEsperaIntento").val("");
  $("#txtUptIdHost").val("");
  $("#txtUptNode").val("");
}
}

//importando grafo guardado.

function getEdgeData(data) {
                var networkEdges = [];

                data.forEach(function(node) {
                    // add the connection
                    node.connections.forEach(function(connId, cIndex, conns) {
                        networkEdges.push({from: node.id, to: connId});
                        let cNode = getNodeById(data, connId);

                        var elementConnections = cNode.connections;

                        // remove the connection from the other node to prevent duplicate connections
                        var duplicateIndex = elementConnections.findIndex(function(connection) {
                          return connection == node.id; // double equals since id can be numeric or string
                        });


                        if (duplicateIndex != -1) {
                          elementConnections.splice(duplicateIndex, 1);
                        };
                  });
                });

                return new vis.DataSet(networkEdges);
            }

function getNodeData(data) {
                var networkNodes = [];

                data.forEach(function(elem, index, array) {
                    networkNodes.push({id: elem.id, label: String(elem.id), /*x: elem.x, y: elem.y,*/level:elem.level});
                });

                return new vis.DataSet(networkNodes);
            }

function getNodeById(data, id) {
                for (var n = 0; n < data.length; n++) {
                    if (data[n].id == id) {  // double equals since id can be numeric or string
                      return data[n];
                    }
                };

                throw 'Can not find id \'' + id + '\' in data';
            }

  function importNetwork(prc_id) {
    if (prc_id != 0) {
    jQuery.ajax({
    method: "POST",
    async: true,
    data: {prcId:prc_id},
    url: "@Url.Action("GetNodeData","Jobs")",

    success: function (data) {
      
      draw(data)
       }
    });

    }
    
    }

  var nodes = null;
  var edges = null;
  var network = null;

  function destroy() {
    if (network !== null) {
      network.destroy();
      network = null;
    }
  }

  function draw(dataNodes) {
    destroy();

 nodes=getNodeData(dataNodes.data);
 edges= getEdgeData(dataNodes.data);
  var data = {
      nodes: nodes,
      edges: edges
  }

    // create a network
    var container = document.getElementById('mynetwork');


	var options = {
		edges: {
			smooth: {
				type: 'cubicBezier',
				forceDirection:  'vertical',
				roundness: 0.4
			}
		},
		layout: {
			hierarchical: {
				direction: 'UD'
			}
		},
		physics:false
	};


       $(nodes._data).each(function(index, element){
           
           for(var i in element)
       $(element [i]).each(function(index2, element2){
        console.log("mielementox ",element2);
  
        if(idproc!=element2.id)
        procsDep.push({"IDPROC":idproc,"IDPROC_DEP":element2.id});
        });
   
});

     network = new vis.Network(container, data, options);
     network.moveTo({
    position: {x: 0, y: 0},
    offset: {x: 5, y: 5},
    scale: 1,
})
    network.on("click", function (params) {
       
		 $(".custom-menu").hide(100);
        
    });
    network.on("doubleClick", function (params) {
      $(".custom-menu").hide(100);
    });
   
		network.on("oncontext", function (params) {
     
		nodeId=this.getNodeAt(params.pointer.DOM);
		 
    if(nodeId!=undefined){
		  var { x: nodeX, y: nodeY } = network.canvasToDOM(
      network.getPositions([nodeId])[nodeId]
    );
    
    		params.event.preventDefault();
				$(".custom-menu").finish().toggle(100);
        console.log("los nodos aqui ",nodes);
         if(nodes._data[nodeId].level+1==1)
       { 
         $(".custom-menu #firstli").show();
				$(".custom-menu #firstli").html("Agregar dependencia "+nodeId);
			 }
        else 	
        $(".custom-menu #firstli").hide();
        $(".custom-menu").css({
 
				top: nodeY + "px",
				left: nodeX + "px"
				});
		 
    }
       
	});

  network.on("hoverNode", function (params) {
	  $(".custom-menu").hide(100);
  });
	

	 $(".custom-menu li").click(function(){
    
   if(nodeId!=undefined){
 

    switch($(this).attr("data-action")) {
      
        case "first": 

          $('#multiple-checkboxes').multiselect('select', 0);$('#multiple-checkboxes').multiselect('refresh');
        $(".bd-example-modal-sm").modal("show");
	   
	  
   	break;
        case "second":
        if(nodeId!=idproc){ 
          console.log("mielemento nodes ",nodes);
        nodes.remove(nodeId);
        edges.remove(nodeId);
        procsDep=[];
         $(nodes._data).each(function(index, element){
           
           for(var i in element)
       $(element [i]).each(function(index2, element2){
        console.log("mielementox ",element2);
  
        if(idproc!=element2.id)
        procsDep.push({"IDPROC":idproc,"IDPROC_DEP":element2.id});
        });
   
});
      }
	 
		
		break;
      case "third": console.log("seleccionaste third"); break;
    }
  }
    $(".custom-menu").hide(100);
  });
  
  }
    
</script>