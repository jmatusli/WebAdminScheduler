<!DOCTYPE html>
<html>

  <head>
    <link rel="stylesheet" href="~/css/datatables.min.css" />
    <script src="~/js/jquery-1.11.3.min.js"></script>
    <script src="~/js/pdfmake.min.js"></script>
    <script src="~/js/vfs_fonts.js"></script>
    <script src="~/js/datatables.min.js"></script>
  </head>

  <body>
    <h1>Jobs</h1>
    <p>
      <a asp-action="Create" class="btn btn-primary">Nuevo</a>
    </p>
    <div class="container">
      <table id="tblJobs" class="display nowrap" width="100%">
        <thead>
          <tr>
            <th><input type="checkbox" name="select_all" class="dt-column-title" value="1" id="tblJobs-select-all"></th>
            <th>IDPROC</th>
            <th>IDCONEX</th>
            <th>NOMBRE</th>
            <th>DESCRIPCIÓN</th>
            <th>PATH</th>  
            <th>PARAMETRO1</th>
            <th>PARAMETRO2</th>
            <th>PARAMETRO3</th>
            <th>PARAMETRO4</th>
            <th>DEPENDENCIA</th>
            <th>INTENTOS</th>
            <th>ESPERA INTENTO</th>
            <th>ESTADO</th>
            <th>FTP</th>
            <th>IDHOST</th>
            <th>COMPRESIÓN</th>
            <th>IDCRONTAB</th>
            <th>NODE</th>
            <th>ACCIÓN</th>
          </tr>
        </thead>
        <tbody>
        </tbody>
      </table>
    </div>
  </body>

<script>
  $(document).ready( function () {
    var table = $('#tblJobs').DataTable( {
      "processing": true,
      "serverSide": true,
      "filter": true,
      "scrollX":          true,
        "sScrollX":         "50%",
        "scrollY":            $(document).height() - 300,
        "scrollCollapse":     true,
        "ajax": {
          "url": "@Url.Action("ListarProcesos","Jobs")",
          "type": "POST",
          "datatype": "json"
        },
        "columnDefs": [{
          'targets': 0,
        orderable: false,
          'render': function (data, type, full, meta){
            return '<input type="checkbox" name="id[]" value="' + $('<div/>').text(data).html() + '">';
          }
          }],
        "columns": [
          {
            "render": function (data,row) { return '<input type="checkbox" name="select_all" class="dt-column-title" value="1" id="example-select-all">'; }
          },
            { "data": "idproc", "name": "idproc", "autoWidth": true },
            { "data": "idconex", "name": "idconex", "autoWidth": true },
            { "data": "nombre", "name": "nombre", "autoWidth": true },
            { "data": "descripcion", "name": "descripcion", "autoWidth": true },
            { "data": "path", "name": "path", "autoWidth": true },
            { "data": "parametro1", "name": "parametro1", "autoWidth": true },
            { "data": "parametro2", "name": "parametro2", "autoWidth": true },
            { "data": "parametro3", "name": "parametro3", "autoWidth": true },
            { "data": "parametro4", "name": "parametro4", "autoWidth": true },
            { "data": "dependencia", "name": "dependencia", "autoWidth": true },
            { "data": "intentos", "name": "intentos", "autoWidth": true },
            { "data": "espera_intento", "name": "espera_intento", "autoWidth": true },
            { "data": "estado", "name": "estado", "autoWidth": true },
            { "data": "ftp", "name": "ftp", "autoWidth": true },
            { "data": "id_Host", "name": "id_Host", "autoWidth": true },
            { "data": "comprension", "name": "comprension", "autoWidth": true },
            { "data": "id_crontab", "name": "id_crontab", "autoWidth": true },
            { "data": "node", "name": "node", "autoWidth": true },
            {
              "render": function (data,row) { return '<a class="btn btn-success">tst</a>&nbsp;<a class="btn btn-info">tst</a>&nbsp;<a class="btn btn-danger">tst</a>';   }
            },
        ],
      
      select: {
        style:    'os',   //default but you have to specify it, no idea why
        selector: 'tr,a:not(.btn)'
      }
    });

    table.on('select', function (e, dt, type, indexes) {
    console.log(e.target);
      if (type === 'row'   ) {
        var nodes = table
        .rows(indexes)
        .nodes()
        .each(function () { 
          $('td:first-child', this).find('input').prop('checked', true); 
        });
        //.find(':checkbox', 'td:first-child').checked = true; 
      }
    });

    table.on('deselect', function (e, dt, type, indexes) {
      if (type === 'row') {
      $('#example-select-all').prop("checked",false);
        table
        .rows(indexes)
        .nodes()
        .each(function () { 
          $('td:first-child', this).find('input').prop('checked', false); 
        });
      }
    });
    
    // Handle click on "Select all" control
    $('#example-select-all').on('click', function(){
        
      console.log("esta selecconado: ",$(this).is(":checked")," otra forma ",this.checked )
      // Get all rows with search applied
        var rows = table.rows({ 'search': 'applied' }).nodes();
        // Check/uncheck checkboxes for all rows in the table
      if(this.checked){
        $('input[type="checkbox"]', rows).prop('checked', this.checked);
        
        var selData =   table.rows().select();
        var selData =   table.rows(".selected").data();
      }
      else 
      {
      var selData =   table.rows().deselect();
      }
    });

    // Handle click on checkbox to set state of "Select all" control
    $('#example tbody').on('change', 'input[type="checkbox"]', function(){
        // If checkbox is not checked
        if(!this.checked){
          var el = $('#example-select-all').get(0);
          // If "Select all" control is checked and has 'indeterminate' property
          if(el && el.checked && ('indeterminate' in el)){
            // Set visual state of "Select all" control
            // as 'indeterminate'
            el.indeterminate = true;
          }
        }
    });
    
    table.on('select', function (e, dt, type, indexes) {
    console.log(e.target);
      if (type === 'row'   ) {
        var nodes = table
        .rows(indexes)
        .nodes()
        .each(function () { 
          $('td:first-child', this).find('input').prop('checked', true); 
        });
        //.find(':checkbox', 'td:first-child').checked = true; 
      }
    });

    table.on('deselect', function (e, dt, type, indexes) {
      if (type === 'row') {
      $('#example-select-all').prop("checked",false);
        table
        .rows(indexes)
        .nodes()
        .each(function () { 
          $('td:first-child', this).find('input').prop('checked', false); 
        });
      }
    });
    
    // Handle click on "Select all" control
    $('#example-select-all').on('click', function(){
        
      console.log("esta selecconado: ",$(this).is(":checked")," otra forma ",this.checked )
      // Get all rows with search applied
        var rows = table.rows({ 'search': 'applied' }).nodes();
        // Check/uncheck checkboxes for all rows in the table
      if(this.checked){
        $('input[type="checkbox"]', rows).prop('checked', this.checked);
        
        var selData =   table.rows().select();
        var selData =   table.rows(".selected").data();
      }
      else 
      {
      var selData =   table.rows().deselect();
      }
    });

    // Handle click on checkbox to set state of "Select all" control
    $('#example tbody').on('change', 'input[type="checkbox"]', function(){
        // If checkbox is not checked
        if(!this.checked){
          var el = $('#example-select-all').get(0);
          // If "Select all" control is checked and has 'indeterminate' property
          if(el && el.checked && ('indeterminate' in el)){
          // Set visual state of "Select all" control
          // as 'indeterminate'
          el.indeterminate = true;
        }
      }
    });
  });
</script>
</html>