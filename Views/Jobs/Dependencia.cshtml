@model WebAdminScheduler.Models.CP_PROCESOS;

@{
  ViewData["Title"] = "Dependencia";
}
<head>
    <link rel="stylesheet" href="~/css/datatables.min.css" />
    <link rel="stylesheet" href="~/lib/bootstrap/3.3.4/css/bootstrap.min.css" /> 
    <link rel="stylesheet" href="~/lib/Toast/dist/jquery.toast.min.css" />
    <link rel="stylesheet" href="~/lib/SweetAlert/dist/sweetalert2.min.css" />
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap-multiselect.css" /> 
    <link rel="stylesheet" href="~/lib/Vis/dist/vis-network.min.css" rel="stylesheet" type="text/css"/>

    <script src="~/js/jquery-1.11.3.min.js"></script>
    <script src="~/js/pdfmake.min.js"></script>
    <script src="~/js/vfs_fonts.js"></script>
    <script src="~/js/datatables.min.js"></script>
    <script src="~/lib/SweetAlert/dist/sweetalert2.min.js"></script>
    <script src="~/lib/Toast/dist/jquery.toast.min.js"></script>
    <script src="~/lib/Vis/dist/vis.js"></script>
    <script src="~/lib/bootstrap/3.3.4/js/bootstrap.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap-multiselect.js"></script>
    
  
  <style>
    #mynetwork {
      width: 100%;
      height: 450px;
      border: 1px solid lightgray;
      align:center;
    }
 </style>
</head>
  <div class="card">
            <div class="card-header">
                Detalle
            </div>
            <div class="card-body">
                <div class="row g-4 align-items-center">
                    <div class="col-auto">
                        <label for="TittleProc" class="col-form-label"><strong>IDPROC:</strong></label>
                        <label for="txtIdProc" class="col-form-label">@Model.IDPROC</label>
                    </div>
                </div>
            </div>
         
        </div>
        <br />
    <div class="container">
   <div id="mynetwork">
          </div>       
    </div>
    <br />
 
<script> 
 
  var idproc="@Model.IDPROC";
  
//importando grafo guardado.
function getNode(nodeId){
     var nodeObj= network.body.data.nodes._data[nodeId];
     return nodeObj;  
}
function getEdgeData(data) {
  var networkEdges = [];

  data.forEach(function(node) {
    // add the connection
    node.connections.forEach(function(connId, cIndex, conns) {
      networkEdges.push({from: node.id, to: connId});
      let cNode = getNodeById(data, connId);

      var elementConnections = cNode.connections;

      // remove the connection from the other node to prevent duplicate connections
      var duplicateIndex = elementConnections.findIndex(function(connection) {
        return connection == node.id; // double equals since id can be numeric or string
      });

      if (duplicateIndex != -1) {
        elementConnections.splice(duplicateIndex, 1);
      };
    });
  });

  return new vis.DataSet(networkEdges);
}

function getNodeData(data) {
  var networkNodes = [];

  data.forEach(function(elem, index, array) {
    networkNodes.push({id: elem.id, label: String(elem.id), /*x: elem.x, y: elem.y,*/level:elem.level});
  });

  return new vis.DataSet(networkNodes);
}

function getNodeById(data, id) {
  for (var n = 0; n < data.length; n++) {
    if (data[n].id == id) {  // double equals since id can be numeric or string
      return data[n];
    }
  };

  throw 'Can not find id \'' + id + '\' in data';
}

  function importNetwork(prc_id) {
    if (prc_id != 0) {
    jQuery.ajax({
    method: "POST",
    async: true,
    data: {prcId:prc_id},
    url: "@Url.Action("GetNodeData","Jobs")",

    success: function (data) {
      draw(data)
    }
  });

    }
    
    }

  var nodes = null;
  var edges = null;
  var network = null;

  function destroy() {
    if (network !== null) {
      network.destroy();
      network = null;
    }
  }

  function draw(dataNodes) {
    destroy();

    nodes=getNodeData(dataNodes.data);
    edges= getEdgeData(dataNodes.data);
    var data = {
      nodes: nodes,
      edges: edges
    }

    // create a network
    var container = document.getElementById('mynetwork');

	var options = {
		edges: {
			smooth: {
				type: 'cubicBezier',
				forceDirection:  'vertical',
				roundness: 0.4
			}
		},
		layout: {
			hierarchical: {
				direction: 'UD'
			}
		},
		physics:false
	};

     network = new vis.Network(container, data, options);

	
  network.once('initRedraw', function() {
    network.moveTo({offset:{x:120,y:50}, position: {x:120, y: 150}})
  })

   
  
  }
  
  importNetwork(idproc)
</script>