@model WebAdminScheduler.Models.CP_PROCESOS;

@{
  ViewData["Title"] = "Dependencia";
}
<head>
    <link rel="stylesheet" href="~/css/datatables.min.css" />
    <link rel="stylesheet" href="~/lib/bootstrap/3.3.4/css/bootstrap.min.css" /> 
    <link rel="stylesheet" href="~/lib/Toast/dist/jquery.toast.min.css" />
    <link rel="stylesheet" href="~/lib/SweetAlert/dist/sweetalert2.min.css" />
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap-multiselect.css" /> 
    <link rel="stylesheet" href="~/lib/Vis/dist/vis-network.min.css" rel="stylesheet" type="text/css"/>

    <script src="~/js/jquery-1.11.3.min.js"></script>
    <script src="~/js/pdfmake.min.js"></script>
    <script src="~/js/vfs_fonts.js"></script>
    <script src="~/js/datatables.min.js"></script>
    <script src="~/lib/SweetAlert/dist/sweetalert2.min.js"></script>
    <script src="~/lib/Toast/dist/jquery.toast.min.js"></script>
    <script src="~/lib/Vis/dist/vis.js"></script>
    <script src="~/lib/bootstrap/3.3.4/js/bootstrap.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap-multiselect.js"></script>
    
  
  <style>
    #mynetwork {
      width: 100%;
      height: 450px;
      border: 1px solid lightgray;
      align:center;
    }
 </style>
</head>
  <div class="card">
            <div class="card-header">
                Detalle
            </div>
            <div class="card-body">
                <div class="row g-4 align-items-center">
                    <div class="col-auto">
                        <label for="TittleProc" class="col-form-label"><strong>IDPROC:</strong></label>
                        <label for="txtIdProc" class="col-form-label">@Model.IDPROC</label>
                    </div>
                </div>
            </div>
         
        </div>
        <br />
    <div class="container">
   <div id="mynetwork">
          </div>       
    </div>
    <br />
 
<script> 
 
  var idproc="@Model.IDPROC";
  

	 function utf8_encode(argString) {
  //  discuss at: https://locutus.io/php/utf8_encode/
  // original by: Webtoolkit.info (https://www.webtoolkit.info/)
  // improved by: Kevin van Zonneveld (https://kvz.io)
  // improved by: sowberry
  // improved by: Jack
  // improved by: Yves Sucaet
  // improved by: kirilloid
  // bugfixed by: Onno Marsman (https://twitter.com/onnomarsman)
  // bugfixed by: Onno Marsman (https://twitter.com/onnomarsman)
  // bugfixed by: Ulrich
  // bugfixed by: Rafa≈Ç Kukawski (https://blog.kukawski.pl)
  // bugfixed by: kirilloid
  //   example 1: utf8_encode('Kevin van Zonneveld')
  //   returns 1: 'Kevin van Zonneveld'

  if (argString === null || typeof argString === 'undefined') {
    return ''
  }

  // .replace(/\r\n/g, "\n").replace(/\r/g, "\n");
  const string = argString + ''
  let utftext = ''
  let start
  let end
  let stringl = 0

  start = end = 0
  stringl = string.length
  for (let n = 0; n < stringl; n++) {
    let c1 = string.charCodeAt(n)
    let enc = null

    if (c1 < 128) {
      end++
    } else if (c1 > 127 && c1 < 2048) {
      enc = String.fromCharCode((c1 >> 6) | 192, (c1 & 63) | 128)
    } else if ((c1 & 0xf800) !== 0xd800) {
      enc = String.fromCharCode((c1 >> 12) | 224, ((c1 >> 6) & 63) | 128, (c1 & 63) | 128)
    } else {
      // surrogate pairs
      if ((c1 & 0xfc00) !== 0xd800) {
        throw new RangeError('Unmatched trail surrogate at ' + n)
      }
      const c2 = string.charCodeAt(++n)
      if ((c2 & 0xfc00) !== 0xdc00) {
        throw new RangeError('Unmatched lead surrogate at ' + (n - 1))
      }
      c1 = ((c1 & 0x3ff) << 10) + (c2 & 0x3ff) + 0x10000
      enc = String.fromCharCode((c1 >> 18) | 240, ((c1 >> 12) & 63) | 128, ((c1 >> 6) & 63) | 128, (c1 & 63) | 128)
    }
    if (enc !== null) {
      if (end > start) {
        utftext += string.slice(start, end)
      }
      utftext += enc
      start = end = n + 1
    }
  }

  if (end > start) {
    utftext += string.slice(start, stringl)
  }

  return utftext
}

function utf8_decode(strData) {
  //  discuss at: https://locutus.io/php/utf8_decode/
  // original by: Webtoolkit.info (https://www.webtoolkit.info/)
  //    input by: Aman Gupta
  //    input by: Brett Zamir (https://brett-zamir.me)
  // improved by: Kevin van Zonneveld (https://kvz.io)
  // improved by: Norman "zEh" Fuchs
  // bugfixed by: hitwork
  // bugfixed by: Onno Marsman (https://twitter.com/onnomarsman)
  // bugfixed by: Kevin van Zonneveld (https://kvz.io)
  // bugfixed by: kirilloid
  // bugfixed by: w35l3y (https://www.wesley.eti.br)
  //   example 1: utf8_decode('Kevin van Zonneveld')
  //   returns 1: 'Kevin van Zonneveld'

  const tmpArr = []
  let i = 0
  let c1 = 0
  let seqlen = 0

  strData += ''

  while (i < strData.length) {
    c1 = strData.charCodeAt(i) & 0xff
    seqlen = 0

    // https://en.wikipedia.org/wiki/UTF-8#Codepage_layout
    if (c1 <= 0xbf) {
      c1 = c1 & 0x7f
      seqlen = 1
    } else if (c1 <= 0xdf) {
      c1 = c1 & 0x1f
      seqlen = 2
    } else if (c1 <= 0xef) {
      c1 = c1 & 0x0f
      seqlen = 3
    } else {
      c1 = c1 & 0x07
      seqlen = 4
    }

    for (let ai = 1; ai < seqlen; ++ai) {
      c1 = (c1 << 0x06) | (strData.charCodeAt(ai + i) & 0x3f)
    }

    if (seqlen === 4) {
      c1 -= 0x10000
      tmpArr.push(String.fromCharCode(0xd800 | ((c1 >> 10) & 0x3ff)))
      tmpArr.push(String.fromCharCode(0xdc00 | (c1 & 0x3ff)))
    } else {
      tmpArr.push(String.fromCharCode(c1))
    }

    i += seqlen
  }

  return tmpArr.join('')
}

	function getRandomColor() {
    var letters = '0123456789ABCDEF'.split('');
    var color = '#';
    for (var i = 0; i < 6; i++ ) {
        color += letters[Math.floor(Math.random() * 16)];
    }
    
    return color;
}
	
//importando grafo guardado.
function getNode(nodeId){
  var nodeObj= network.body.data.nodes._data[nodeId];
  return nodeObj;  
}
function getEdgeData(data) {
  var networkEdges = [];

  data.forEach(function(node) {
    // add the connection
    node.connections.forEach(function(connId, cIndex, conns) {
     		  var color="";
    color=getRandomColor();
				networkEdges.push({from: node.id, to: connId,arrows:'from',color: {
      color:color,
      highlight:color,
      hover: color,
      inherit: 'from',
      opacity:2.0
    }});
      let cNode = getNodeById(data, connId);

      var elementConnections = cNode.connections;

      // remove the connection from the other node to prevent duplicate connections
      var duplicateIndex = elementConnections.findIndex(function(connection) {
        return connection == node.id; // double equals since id can be numeric or string
      });

      if (duplicateIndex != -1) {
        elementConnections.splice(duplicateIndex, 1);
      };
    });
  });

  return new vis.DataSet(networkEdges);
}

function getNodeData(data) {
  var networkNodes = [];

	data.forEach(function(elem, index, array) {
		 	networkNodes.push({id: elem.id, title:utf8_decode(elem.title),label: String(elem.id), /*x: elem.x, y: elem.y,*/level:elem.level});
		});

  return new vis.DataSet(networkNodes);
}

function getNodeById(data, id) {
  for (var n = 0; n < data.length; n++) {
    if (data[n].id == id) {  // double equals since id can be numeric or string
      return data[n];
    }
  };

  throw 'Can not find id \'' + id + '\' in data';
}

  function importNetwork(prc_id) {
    if (prc_id != 0) {
    jQuery.ajax({
    method: "POST",
    async: true,
    data: {prcId:prc_id},
    url: "@Url.Action("GetAllNodeData","Jobs")",

    success: function (data) {

      console.log("esto viene del getall ",data);
      draw(data)
    }
  });

    }
    
    }

  var nodes = null;
  var edges = null;
  var network = null;

  function destroy() {
    if (network !== null) {
      network.destroy();
      network = null;
    }
  }

  function draw(dataNodes) {
    destroy();

    nodes=getNodeData(dataNodes.data);
    edges= getEdgeData(dataNodes.data);
    var data = {
      nodes: nodes,
      edges: edges
    }

    // create a network
    var container = document.getElementById('mynetwork');

	 var options = {
   /* layout: {
                    hierarchical: {
                        direction: 'DU',
						sortMethod: 'directed'
                    }
                },*/
         edges: {
      smooth: {
                        type: 'cubicBezier',
                        forceDirection: 'vertical',
                        roundness: 0.4
                    },
					
    },
   physics: {
      enabled: false
    },
	
  };


     network = new vis.Network(container, data, options);

	
  network.once('initRedraw', function() {
    network.moveTo({offset:{x:120,y:50}, position: {x:120, y: 150}})
  })

	 
  
  }
  importNetwork(idproc)
</script>