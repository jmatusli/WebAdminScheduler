@model WebAdminScheduler.Models.CP_CRONTAB;
@{  
  ViewData["Title"] = "Crear";  
}
<head>
  <link rel="stylesheet" href="~/css/datatables.min.css" />
  <link rel="stylesheet" href="~/lib/Toast/dist/jquery.toast.min.css" />
   <link rel="stylesheet" href="~/lib/bootstrap/3.3.4/css/bootstrap.min.css" /> 
  <link rel="stylesheet" href="~/lib/SweetAlert/dist/sweetalert2.min.css" />
   <link rel="stylesheet" href="~/lib/Vis/dist/vis-network.min.css" rel="stylesheet" type="text/css"/>
<link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap-multiselect.css" rel="stylesheet" type="text/css"/>

  
  <script src="~/js/jquery-1.11.3.min.js"></script>
  <script src="~/js/pdfmake.min.js"></script>
  <script src="~/js/vfs_fonts.js"></script>
  <script src="~/js/datatables.min.js"></script>
  <script src="~/lib/SweetAlert/dist/sweetalert2.min.js"></script>
  <script src="~/lib/Toast/dist/jquery.toast.min.js"></script>
   <script src="~/lib/Vis/dist/vis.js"></script>
   <script src="~/lib/bootstrap/3.3.4/js/bootstrap.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap-multiselect.js"></script>
  <style>
  #mynetwork {
            width: 700px;
            height: 450px;
            border: 1px solid lightgray;
            align:center;
        }

  	/* CSS3 */

/* The whole thing */
.custom-menu {
    display: none;
    z-index: 1000;
    position: absolute;
    overflow: hidden;
    border: 1px solid #CCC;
    white-space: nowrap;
    font-family: sans-serif;
    background: #FFF;
    color: #333;
    border-radius: 5px;
    padding: 0;
}

/* Each of the items in the list */
.custom-menu li {
    padding: 8px 12px;
    cursor: pointer;
    list-style-type: none;
    transition: all .3s ease;
    user-select: none;
}

.custom-menu li:hover {
    background-color: #DEF;
}      
.bd-example-modal-lg.modal.custom-class {
	z-index: 1029;

}

 

.bd-example-modal-sm.custom-class {
	z-index: 1050
}
  </style>
</head>
 
<h1>@ViewData["Title"]Jobs</h1>
<div class="card">
  <div class="card-header">
    <a  id="saveJob" class="btn btn-primary">Guardar</a>
  </div>
  <div class="card-body">
    
<div class="container">
      <div class="row">      
		  <div class="col-auto">
        <label for="TittleConex" class="col-form-label"> Registro   (@ViewBag.LastIdproc)</label>
      </div>
       
    </div>   
    </div>   
    <br /> 
    <div class="container">
      <div class="row">
      <div class="col-auto">
        <label for="TittleConex" class="col-form-label">CONEXION</label>
      </div>
      <div class="col-auto">
        <div class="">
            <select class="form-control" id="slcIdConex">
            <option value="0">Seleccione Conexion</option>
          </select>
        </div> 
	  
	  </div>
    </div>
    </div>
    <br />

    <div class="container">
      <div class="row">
        <div class="col-auto">
          <label for="TittleNombre" class="col-form-label">NOMBRE</label>
        </div>
        <div class="col-6">
          <input type="text" min="1" class="form-control clockpicker" data-placement="right" data-align="top" data-autoclose="true" id="txtNombre" name="txtNombre">
        </div>
      </div>
    </div>
    <br />

    <div class="container">
      <div class="row">
        <div class="col-auto">
          <label for="TittleDescrpcion" class="col-form-label">DESCRIPCIÓN</label>
        </div>
        <div class="col-6">
          <input type="text" min="1" class="form-control clockpicker" data-placement="right" data-align="top" data-autoclose="true" id="txtDescripcion" name="txtDescripcion">
        </div>
      </div>
    </div>
    <br />

    <div class="container">
      <div class="row">
        <div class="col-auto">
          <label for="TittlePath" class="col-form-label">PATH</label>
        </div>
        <div class="col-6">
          <input type="text" min="1" class="form-control clockpicker" data-placement="right" data-align="top" data-autoclose="true" id="txtPath" name="txtPath">
        </div>
      </div>
    </div>
    <br />
    
    <div class="container">
      <div class="row">
        <div class="col-auto">
          <label for="TittleParametro1" class="col-form-label">PARAMETRO1</label>
        </div>
        <div class="col-6">
          <input type="text" min="1" class="form-control clockpicker" data-placement="right" data-align="top" data-autoclose="true" id="txtParametro1" name="txtParametro1">
        </div>
      </div>
    </div>
    <br />

    <div class="container">
      <div class="row">
        <div class="col-auto">
          <label for="TittleParametroDos" class="col-form-label">PARAMETRO2</label>
        </div>
        <div class="col-6">
          <input type="text" min="1" class="form-control clockpicker" data-placement="right" data-align="top" data-autoclose="true" id="txtParametro2" name="txtParametro2">
        </div>
      </div>
    </div>
    <br />

    <div class="container">
      <div class="row">
        <div class="col-auto">
          <label for="TittleParametroTres" class="col-form-label">PARAMETRO3</label>
        </div>
        <div class="col-6">
          <input type="text" min="1" class="form-control clockpicker" data-placement="right" data-align="top" data-autoclose="true" id="txtParametro3" name="txtParametro3">
        </div>
      </div>
    </div>
    <br />

    <div class="container">
      <div class="row">
        <div class="col-auto">
          <label for="TittleParametroCuatro" class="col-form-label">PARAMETRO4</label>
        </div>
        <div class="col-6">
          <input type="text" min="1" class="form-control clockpicker" data-placement="right" data-align="top" data-autoclose="true" id="txtParametro4" name="txtParametro4">
        </div>
      </div>
    </div>
    <br />

    <div class="row g-4 align-items-center">
      <div class="col-auto">
        <div class="form-check">
          <input class="form-check-input" type="checkbox" value="" id="txtDependencia" name="txtDependencia">
          <label class="form-check-label" for="lblDependencia">
            DEPENDENCIA
          </label>
        </div>
      </div>
      <div class="col-auto">
        <label class="form-check-label" for="lblIntentos">
          INTENTOS
        </label>
      </div>
      <div class="col-auto">
        <input type="number" min="1" class="form-control clockpicker" data-placement="right" data-align="top" data-autoclose="true" id="txtIntentos" name="txtIntentos">
      </div>
      <div class="col-auto">
        <label class="form-check-label" for="lblEsperaIntento">
          ESPERA INTENTO
        </label>
      </div>
      <div class="col-auto">
        <input type="number" min="1" class="form-control clockpicker" data-placement="right" data-align="top" data-autoclose="true" id="txtEsperaIntento" name="txtEsperaIntento">
      </div>
      <div class="col-auto">
        <label class="form-check-label" for="RepeatEstado">
          ESTADO
        </label>
      </div>
      <div class="col-auto">
        <select class="form-select" name="txtEstado" id="txtEstado">
          <option value="Activo">ACTIVO</option>
          <option value="Inactivo">INACTIVO</option>
          <option value="Internal">INTERNAL</option>
        </select>
      </div>
    </div>
    <br />

    <div class="row g-4 align-items-center">
      <div class="col-auto">
        <div class="form-check">
          <input class="form-check-input" type="checkbox" value="" id="flexCheckFtp">
          <label class="form-check-label" for="flexCheckFtp">
            FTP
          </label>
        </div>
      </div>
      <div class="col-auto">
        <label class="form-check-label" for="idHost">
          IDHOST
        </label>
      </div>
      <div class="col-auto">
        <input type="number" min="1" class="form-control clockpicker" data-placement="right" data-align="top" data-autoclose="true" id="txtIdHost" name="txtIdHost">
      </div>
      <div class="col-auto">
        <div class="form-check">
          <input class="form-check-input" type="checkbox" value="" id="flexCheckCompresion">
          <label class="form-check-label" for="flexCheckCompresion">
            COMPRESIÓN
          </label>
        </div>
      </div>
      <div class="col-auto">
        <label class="form-check-label" for="Node">
          NODE
        </label>
      </div>
      <div class="col-auto">
        <input type="text" maxlength="10" class="form-control" data-placement="right" data-align="top" data-autoclose="true" id="txtNode" name="txtNode">
      </div>
      <div class="col-auto">
        <button type="button" class="btn btn-info" id="btnDependencia" data-target=".bd-example-modal-lg" name="btnDependencia" disabled>Agregar Dependencia</button>
      </div>
    </div>
    <br />

    <div class="row g-4 align-items-center">
      <div class="col-auto">
        <label class="form-check-label" for="Notifications">
          NOTIFICACIONES
        </label>
      </div>
      <div class="col-auto">
        <select class="form-select" name="txtNotifications" id="txtNotifications">
          <option value="0">0 - Dummy Notification</option>
          <option value="1">1 - Notification Success/Failure to BI members</option>
          <option value="2">2 - Notification Success Only to BI members</option>
          <option value="3">3 - Notification Failure Only to BI members</option>
        </select>
      </div>
    </div>
  </div>
  <div class="card-footer text-muted">
    <h4 style="text-align: center;">Registrar Crontab</h4>
  </div>
</div>

<div class="container">
  <table id="dt-crontab" class="display nowrap" width="100%">
    <thead>
      <tr style="font-size:13px;">
        <th><input type="checkbox" name="select_all" class="dt-column-title" value="1" id="dt-crontab-select-all-th"></th>
        <th>IDCRONTAB</th>
        <th>HORA INICIO</th>
        <th>HORA FIN</th>
        <th>DAYS</th>
        <th>DAY EXE</th>
        <th>MONTHS</th>
        <th>REPEAT EVERY MINS</th>
        <th>REPEAT AFTER FINISH</th>
      </tr>
    </thead>
    <tbody>
    </tbody>
  </table>
</div>

<div class="modal fade bd-example-modal-lg" id="bd-example-modal-lg" tabindex="-1" role="dialog" aria-labelledby="basicModal">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h4 class="modal-title" id="myModalLabel">Dependencias</h4>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
      
      </div>
      <div class="modal-body">
        <ul class='custom-menu'>
          <li data-action="first" id="firstli">Agregar Dependencia</li>
          <li data-action="second">Borrar Dependencia</li>
          <li data-action="third">Cancelar</li>
        </ul>
        <div id="mynetwork">
        </div>        	
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

  <div class="modal fade bd-example-modal-sm" id="bd-example-modal-lg" tabindex="-1" role="dialog" aria-labelledby="basicModal">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h4 class="modal-title" id="myModalLabel">Proceso</h4>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
      </div>
      <div class="modal-body">
        <div class="">
          <strong>Seleccionar dependencia:</strong>
          <select id="multiple-checkboxes">
            <option value="0">Seleccione proceso</option>
          </select>
        </div>      	
      </div>
      <div class="modal-footer">
      
        <button type="button" class="btn btn-info btnaddDep">Guardar</button>
        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<script>
  var nodeId=0;
  var nextnode=0;
  let procsDep=[];
  var params={}, selectedCrontab = 0;
  var LastIdproc="@ViewBag.LastIdproc";

  function recargartabla(objeto,value)
  {
    params.estado = value;
    objeto.ajax.reload(null,false); //reload datatable ajax 
  }

   var data_job = {}
var existeNombre=false;
 function verifyName()
{
$.ajax({
        method: "POST",
        async: true,
        
        data:{"nombre":$("#txtNombre").val()},
         url: '@Url.Action("VerifyName", "Jobs")' ,
        success: function (response) {

          console.log("respuesta ",response);
       if(response.error)
       {
        existeNombre=true;
   Swal.fire (response.msg, 'error')

       }
       
      },
      error: function () {
        alert("Error while inserting data");
      }
    });
}


  $(document).ready( function () {
    var table = $('#dt-crontab').DataTable( {
      "processing": true,
      "serverSide": true,
      "paging": true,
	    "deferLoading": 0, // here
      "scrollX":          true,
      "sScrollX":         "50%",
      "scrollY":            $(document).height() - 300,
      "scrollCollapse":     true,
      "ajax": {
        "url": "@Url.Action("ListarCrontabs","Calendario")",
        "type": "POST",
        "datatype": "json",
		    "data": function(d){
          $.extend( d, params);    
        }
      },
      drawCallback: function(settings){ 
        if($(this).find('tbody tr').length <= 1){
        $('.dt-paging-button').hide();
      }
    },
      "columnDefs": [{
        'targets': 0,
        orderable: false
      }],
      "columns": [
        {
          "render": function (data,row) { return '<input type="radio" name="select_all" class="dt-column-title" value="1" id="dt-crontab-select-item">';   }
        },
        { "data": "idcrontab", "name": "idcrontab", "autoWidth": true },
        { "data": "horA_INICIO", "name": "horA_INICIO", "autoWidth": true },
        { "data": "horA_FIN", "name": "horA_FIN", "autoWidth": true },
        { "data": "wdaY_M2S_EX", "name": "wdaY_M2S_EX", "autoWidth": true },
        { "data": "daY_EX", "name": "daY_EX", "autoWidth": true },
        { "data": "montH_EX", "name": "montH_EX", "autoWidth": true },
        { "data": "repeaT_EVERY_MINS", "name": "repeaT_EVERY_MINS", "autoWidth": true },
        { "data": "repeaT_AFTER_FINISH", "name": "repeaT_AFTER_FINISH", "autoWidth": true },
      ],
    
    select: {
    style: 'single',
    selector: 'td:not(:last-child)' // no row selection on last column
    },
      "language": {
      "url": "/lib/datatables/dist/locales/es/es.json"
      }
    });

    table.on('select', function (e, dt, type, indexes) {
    
      if (type === 'row'   ) {
        var nodes = table
        .rows(indexes)
        .nodes()
        .each(function () { 
          $('td:first-child', this).find('input').prop('checked', true);
        });
        selectedCrontab = table.rows( { selected: true }).data()[0].idcrontab;
      }
    });

    table.on('deselect', function (e, dt, type, indexes) {
      if (type === 'row') {
      $('#dt-crontab-select-all').prop("checked",false);
        table
        .rows(indexes)
        .nodes()
        .each(function () { 
          $('td:first-child', this).find('input').prop('checked', false); 
        });
      }
    });
    
    // Handle click on "Select all" control
    $('#dt-crontab-select-all-th').on('click', function() {
      if(table.settings()[0]._select.style=='multi')
      { 
      // Get all rows with search applied
      var rows = table.rows({ 'search': 'applied' }).nodes();
      // Check/uncheck checkboxes for all rows in the table
      if(this.checked) {
        $('input[type="checkbox"]', rows).prop('checked', this.checked);
        var selData =   table.rows().select();
        var selData =   table.rows(".selected").data();
      }
      else 
      {
        var selData =   table.rows().deselect();
      }

      }
      else 
      return false;
    });

    // Handle click on checkbox to set state of "Select all" control
    $('#dt-crontab tbody').on('change', 'input[type="checkbox"]', function() {
      // If checkbox is not checked
      if(!this.checked) {
        var el = $('#dt-crontab-select').get(0);
        // If "Select all" control is checked and has 'indeterminate' property
        if(el && el.checked && ('indeterminate' in el)) {
          // Set visual state of "Select all" control
          // as 'indeterminate'
          el.indeterminate = true;
        }
      }
    });

     $("#txtDependencia").on("change",function() {
      if($(this).is(":checked")) {
        $("#btnDependencia").prop( "disabled", false ); //Enable
      }
      else {
        $("#btnDependencia").prop("disabled", true ); //Disable
      }
    });

    $("#saveJob").on("click",function() {
      var id_conex = $('#slcIdConex').val();
      var nombre = $('#txtNombre').val();
      var descripcion = $('#txtDescripcion').val();
      var path = $('#txtPath').val();
      var parametro1 = $('#txtParametro1').val();
      var parametro2 = $('#txtParametro2').val();
      var parametro3 = $('#txtParametro3').val();
      var parametro4 = $('#txtParametro4').val();
      var dependencia = $('#txtDependencia').is(":checked") ? 1 : 0;
      var intentos = $('#txtIntentos').val();
      var espera_intento = $('#txtEsperaIntento').val();
      var estado = $('#txtEstado').val();
      var notificaciones = $('#txtNotifications').val();
      var ftp = $('#flexCheckFtp').is(":checked") ? 1 : 0;
      var id_host = $('#txtIdHost').val();
      var compresion = $('#flexCheckCompresion').is(":checked") ? 1 : 0;  
      
      var node = $('#txtNode').val();

      var data_job = {
        "oProcesos" : {
          "IDCONEX" : id_conex,
          "NOMBRE" : nombre,
          "DESCRIPCION" : descripcion,
          "PATH" : path,
          "PARAMETRO1" : parametro1,
          "PARAMETRO2" : parametro2,
          "PARAMETRO3" : parametro3,
          "PARAMETRO4" : parametro4,
          "DEPENDENCIA" : dependencia,
          "INTENTOS" : intentos,
          "ESPERA_INTENTO" : espera_intento,
          "ESTADO" : "Activo",
          "IDNOTIF" : notificaciones,
          "FTP" : ftp,
          "IDHOST" : id_host,
          "COMPRESION" : compresion,
          "IDCRONTAB" : selectedCrontab,
          "NODE" : node
        },
        "oDependencias" : procsDep
      };
    
    if ((id_conex == "")) {  //COMPRUEBA CAMPOS VACIOS
      Swal.fire ('Porfavor registre el campo id conexión', 'error')
      return false;
    }

    if ((nombre == "")) {  //COMPRUEBA CAMPOS VACIOS
      Swal.fire ('Porfavor registre el campo nombre', 'error')
      return false;
    }
    else if(existeNombre)
    {return false;}

  
    

    if ((descripcion == "")) {  //COMPRUEBA CAMPOS VACIOS
      Swal.fire ('Porfavor registre el campo descripción', 'error')
      return false;
    }

    if ((path == "")) {  //COMPRUEBA CAMPOS VACIOS
      Swal.fire ('Porfavor registre el campo path', 'error')
      return false;
    }

    if ((intentos == "")) {  //COMPRUEBA CAMPOS VACIOS
      Swal.fire ('Porfavor registre el campo intento', 'error')
      return false;
    }

    if ((espera_intento == "")) {  //COMPRUEBA CAMPOS VACIOS
      Swal.fire ('Porfavor registre el campo espera intento', 'error')
      return false;
    }

    if ((id_host == "")) {  //COMPRUEBA CAMPOS VACIOS
      Swal.fire ('Porfavor registre el campo id host', 'error')
      return false;
    }

    if ((node == "")) {  //COMPRUEBA CAMPOS VACIOS
      Swal.fire ('Porfavor registre el campo node', 'error')
      return false;
    }

    if(selectedCrontab == 0) {  //COMPRUEBA CAMPOS VACIOS
      Swal.fire ('Porfavor registrar un crontab asociado', 'error')
      return false;
    }
    
    else {
      $.ajax({
        method: "POST",
        async: true,
        dataType: "json",
        data: JSON.stringify(data_job),
        contentType: "application/json; charset=utf-8",
        url: '@Url.Action("Save", "Jobs")' ,
        success: function () {
          Swal.fire({
          title: "Job registrado!",
          text: "Click en aceptar para ver jobs registrados!",
          icon: "success",
          confirmButtonText: "Aceptar",
        }).then((result) => {
          if (result.isConfirmed) {
            $(location).attr("href","@Url.Action("Index","Jobs")")
          }  
        });
      },
      error: function () {
        alert("Error while inserting data");
      }
    });
  }// Fin else
  
})      

  $('.bd-example-modal-sm .btnexport').on('click', function(e) {
    exportNetwork();
  });
  
  $('.bd-example-modal-sm .btnaddDep').on('click', function(e) {

  	let nextlevel=nodes._data[nodeId].level+1;
    let nodeTmp=getNode(nextnode);
    if(nodeTmp!=undefined)
    {
      Swal.fire ('El nodo seleccionado ya fue agregado', 'error')
      console.log("existe el nodo ",nodeTmp.id);}
    else {
    
  e.stopPropagation();
  e.preventDefault();

  $(this).attr("disabled",true);   
    nodes.add({ id: nextnode, label: nextnode,level:nextlevel});
		edges.add({ from: nodeId, to: nextnode });

   var arrayData=nodes._data;
    procsDep=[];
    var arData = $.map(arrayData,function(val,key) {
    if(Number(val.id) !=nodeId) return val;
    });
    $(arData).each(function(index, element) {
      procsDep.push({"IDPROC":LastIdproc,"IDPROC_DEP":element.id});
     	
      importNetwork(element.id);
       
    });
  
    network.moveTo({offset:{x:120,y:50}, position: {x:120, y: 150}})

    $(".bd-example-modal-sm").modal("hide");

    }
   
  });

    $('.bd-example-modal-lg').on('shown.bs.modal', function() {
      draw();
    });

    $('#btnDependencia').on('click', function() {
      $(".bd-example-modal-lg").modal("show");
    });

    $('.bd-example-modal-sm').on('shown.bs.modal', function() {
      $(".bd-example-modal-lg").addClass("custom-class");
      $('#multiple-checkboxes').on("change",function(){
      $('.bd-example-modal-sm .btnaddDep').attr("disabled",false);
      nextnode=$(this).val();
    })
    
  });
  
    $('.bd-example-modal-sm').on('hidden.bs.modal', function() {
      $(".bd-example-modal-lg").removeClass("custom-class");
    });
  
    var data_dependencias={oDependencias:{ "IDDEP" : 0,"IDPROC_DEP":0,"IDPROC":LastIdproc}};
 
      $.ajax({
        method: "POST",
        async: true,
        dataType: "json",
        data: JSON.stringify(data_dependencias),
        contentType: "application/json; charset=utf-8",
        url: '@Url.Action("ListarDependencias", "Jobs")' ,
        success: function (response) { 
          $(response).each(function(index,item){
            $('#multiple-checkboxes')
            .append($('<option>')
            .text(item.nombre)
            .attr('value', item.idproc));
          });
          
          $('#multiple-checkboxes').multiselect({
            includeSelectAllOption: true,
             enableFiltering: true,
    includeFilterClearBtn: true,
    enableCaseInsensitiveFiltering: true
          });       
      },
      error: function () {
        alert("Error while get data");
      }
    });
 

 $("#txtNombre").blur(function(){
 verifyName();
});
 $("#txtNombre").on("change",function(){
  verifyName();
});

 cargarDatos();

});

  /*grafo*/
  
  var nodes = null;
  var edges = null;
  var network = null;
function cargarDatos() {
jQuery.ajax({
    method: "POST",
    async: true,
    data: {},
    url: "@Url.Action("ListConexions","Jobs")",

    success: function (data) {
      let elementid=0;
      
       $(data.data).each(function(index, element){
          
               $('#slcIdConex')
            .append($('<option>')
            .text(element.usuario)
            .attr('value', element.idconex));
          });
          
          $('#slcIdConex').multiselect({
            includeSelectAllOption: true,
             enableFiltering: true,
    includeFilterClearBtn: true,
    enableCaseInsensitiveFiltering: true
          });  
          
	}
     
        });

  }
 
 
	
    function importNetwork(prc_id) {
    if (prc_id != 0) {
    jQuery.ajax({
    method: "POST",
    async: true,
    data: {prcId:prc_id},
    url: "@Url.Action("GetAllNodeData","Jobs")",

    success: function (data) {
      let elementid=0;
      console.log("esto viene del getall ",data);
       $(data.data).each(function(index, element){
        if(element.id!=prc_id){
          console.log("iterando  ",element.id);
          elementid=element.id;
       procsDep.push({"IDPROC":prc_id,"IDPROC_DEP":element.id});
       
      }
        });

        console.log("los nodos a procesar en el save serian ",procsDep)
      draw(data,true,prc_id,elementid);
    }
  });

    }
    
    }


  function destroy() {
    if (network !== null) {
      network.destroy();
      network = null;
    }
  }

  function getNode(nodeId){
  var nodeObj= network.body.data.nodes._data[nodeId];
  return nodeObj;  
}
function getEdgeData(data) {
  var networkEdges = [];

  data.forEach(function(node) {
    // add the connection
    node.connections.forEach(function(connId, cIndex, conns) {
      networkEdges.push({from: node.id, to: connId});
      let cNode = getNodeById(data, connId);

      var elementConnections = cNode.connections;

      // remove the connection from the other node to prevent duplicate connections
      var duplicateIndex = elementConnections.findIndex(function(connection) {
        return connection == node.id; // double equals since id can be numeric or string
      });

      if (duplicateIndex != -1) {
        elementConnections.splice(duplicateIndex, 1);
      };
    });
  });

  return new vis.DataSet(networkEdges);
}

function getNodeData(data) {
  var networkNodes = [];

  data.forEach(function(elem, index, array) {
    networkNodes.push({id: elem.id, label: String(elem.id), /*x: elem.x, y: elem.y,*/level:elem.level});
  });

  return new vis.DataSet(networkNodes);
}

function getNodeById(data, id) {
  for (var n = 0; n < data.length; n++) {
    if (data[n].id == id) {  // double equals since id can be numeric or string
      return data[n];
    }
  };

  throw 'Can not find id \'' + id + '\' in data';
}
 
  

  function draw(dataNodes,flag=false,prcid=0,prccid=0) {
    destroy();


    nodes = new vis.DataSet([
      {id: LastIdproc, label: LastIdproc,level:0},
    ]);

    // create an array with edges
     edges = new vis.DataSet([
      //  {from: LastIdproc, to: 2},
    ]);        
		
    
    if(flag)
    {
 
    nodestmp=getNodeData(dataNodes.data);
    edgestmp= getEdgeData(dataNodes.data);
    console.log("nodes inicial ",nodes);
    
    console.log("edges inicial ",edges);
 console.log("edgestmp ",edgestmp);
 
    datatmp=nodestmp._data;
    extdatemp={};
 for (let i in edgestmp) {
            console.log("edgestmp  i ", edgestmp[i].from ," tooo ",edgestmp[i].to );
      
         }


    for (let i in datatmp) {
            console.log("nodes  i ", datatmp[i].level);
      datatmp[i].level=datatmp[i].level+1;
         }


      nodestmp._data=datatmp;
    console.log("nodes datatmp level up",datatmp);
    $.extend( nodes._data, nodestmp._data );
    $.extend( edges._data, edgestmp._data );
     console.log("prccid ",prccid," prcid ",prcid);
    if(prcid>0)
    edges.add({ from: prcid, to: LastIdproc });
    console.log("nodes extendido ",nodes);
    
    console.log("edges extendido ",edges);
        console.log("procesos a registrar ",procsDep);

    } 

    // create a network
    var container = document.getElementById('mynetwork');
    var data = {
      nodes: nodes,
      edges: edges
    };

	var options = {
		edges: {
			smooth: {
				type: 'cubicBezier',
				forceDirection:  'vertical',
				roundness: 0.4
			}
		},
		layout: {
			hierarchical: {
				direction: 'UD'
			}
		},
		physics:false
	};

    network = new vis.Network(container, data, options);
 
    network.on("click", function (params) {
		  $(".custom-menu").hide(100);
    });

    network.on("doubleClick", function (params) {
      $(".custom-menu").hide(100);
    });
   
		network.on("oncontext", function (params) {
     
		nodeId=this.getNodeAt(params.pointer.DOM);
		 
    if(nodeId!=undefined){
		  var { x: nodeX, y: nodeY } = network.canvasToDOM(
      network.getPositions([nodeId])[nodeId]
    );
    
      params.event.preventDefault();
      $(".custom-menu").finish().toggle(100);

      if(nodes._data[nodeId].level+1==1)
      { 
        $(".custom-menu #firstli").show();
				$(".custom-menu #firstli").html("Agregar dependencia "+nodeId);
			}
      else 	
      $(".custom-menu #firstli").hide();
      $(".custom-menu").css({

      top: nodeY + "px",
      left: nodeX + "px"
      });
		 
    }
       
	});

  network.on("hoverNode", function (params) {
	  $(".custom-menu").hide(100);
  });

network.once('initRedraw', function() {
network.moveTo({offset:{x:120,y:0}, position: {x:120, y: 150}})
})

	$(".custom-menu li").click(function(){
    
   if(nodeId!=undefined) {
 
    switch($(this).attr("data-action")) {
      
      case "first": 
        $('#multiple-checkboxes').multiselect('select', 0);$('#multiple-checkboxes').multiselect('refresh');
        $(".bd-example-modal-sm").modal("show");
	   
   	break;
      case "second":
      if(nodeId!=LastIdproc){ 
      nodes.remove(nodeId);
      edges.remove(nodeId);

        procsDep=[];
        $(nodes._data).each(function(index, element){
           
        for(var i in element)
        $(element [i]).each(function(index2, element2) {

        if(LastIdproc!=element2.id)
        procsDep.push({"IDPROC":LastIdproc,"IDPROC_DEP":element2.id});
        });
      });
    }

		break;
      case "third": console.log("seleccionaste third"); break;
    }
  }
    $(".custom-menu").hide(100);
  });
  
  }

/*fin grafo*/
 
</script> 